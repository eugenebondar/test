/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);

var /* istanbul ignore next */_Select = require('../../../../Shared/Elements/Select'); /* istanbul ignore next */var _Select2 = _interopRequireDefault(_Select);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

SelectField = function (_React$Component) {_inherits(SelectField, _React$Component);function SelectField() {_classCallCheck(this, SelectField);return _possibleConstructorReturn(this, (SelectField.__proto__ || Object.getPrototypeOf(SelectField)).apply(this, arguments));}_createClass(SelectField, [{ key: 'render', value: function render()
        {
            var require = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'sc-error required-star' }, /* istanbul ignore next */'*'); /* istanbul ignore next */var _props =



            this.props,options = _props.options,isEdit = _props.isEdit,id = _props.id,value = _props.value,updateValue = _props.updateValue,getTranslate = _props.getTranslate,getValidationError = _props.getValidationError,getValidationClass = _props.getValidationClass,valueForEditMode = _props.valueForEditMode;
            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form__field' + getValidationClass(id) },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'label', /* istanbul ignore next */null,
                        getTranslate(id), /* istanbul ignore next */': ',
                        isEdit ? null : require),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form__input' },
                        isEdit ? valueForEditMode :
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_Select2.default, /* istanbul ignore next */{
                            id: id,
                            updateValue: updateValue,
                            options: options,
                            value: value }),


                        getValidationError(id))));



        } }]);return SelectField;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */exports.default = SelectField;


SelectField.propTypes = {
    updateValue: /* istanbul ignore next */_react2.default.PropTypes.func,
    getValidationError: /* istanbul ignore next */_react2.default.PropTypes.func,
    getTranslate: /* istanbul ignore next */_react2.default.PropTypes.func,
    getValidationClass: /* istanbul ignore next */_react2.default.PropTypes.func,
    isEdit: /* istanbul ignore next */_react2.default.PropTypes.bool,
    value: /* istanbul ignore next */_react2.default.PropTypes.string,
    valueForEditMode: /* istanbul ignore next */_react2.default.PropTypes.string,
    options: /* istanbul ignore next */_react2.default.PropTypes.array,
    id: /* istanbul ignore next */_react2.default.PropTypes.string };