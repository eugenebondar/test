/* istanbul ignore next */'use strict';var /* istanbul ignore next */_SessionUserStore = require('./SessionUserStore'); /* istanbul ignore next */var _SessionUserStore2 = _interopRequireDefault(_SessionUserStore);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe( /* istanbul ignore next */_SessionUserStore2.default.name, function () {
    describe( /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays.name, function () {
        describe('when the sessionTimeoutDelay is greater than one minute', function () {
            it('sets the sessionTimeoutDelay and does not display error on console', function () {
                /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutDelay = undefined;
                spyOn(console, 'error');
                expect(console.error).not.toHaveBeenCalled();

                /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays(60001);
                expect(console.error).not.toHaveBeenCalled();
                expect( /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutDelay).toEqual(60001);

                /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays(123123123);
                expect(console.error).not.toHaveBeenCalled();
                expect( /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutDelay).toEqual(123123123);
            });
        });

        describe('when the sessionTimeoutDelay is no greater than one minute', function () {
            it('outputs error on console', function () {
                /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutDelay = undefined;
                spyOn(console, 'error');
                expect(console.error).not.toHaveBeenCalled();

                /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays(1);
                expect(console.error).toHaveBeenCalledTimes(1);
                expect( /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutDelay).toEqual(undefined);

                /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays(60000);
                expect(console.error).toHaveBeenCalledTimes(2);
                expect( /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutDelay).toEqual(undefined);

                /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays(59999);
                expect(console.error).toHaveBeenCalledTimes(3);
                expect( /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutDelay).toEqual(undefined);
            });
        });
        describe('when sessionTimeoutDelay is 15 minutes', function () {
            beforeAll(function () {
                /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays(15 * 60000);
            });
            it('first session expiration notification should be delayed by 10 minutes - that is 5 minutes before session timeout', function () {
                expect( /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutWarningDelay).toEqual(10 * 60000);
            });
        });
        describe('when sessionTimeoutDelay is 30 minutes', function () {
            beforeAll(function () {
                /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays(30 * 60000);
            });
            it('first session expiration notification should be delayed by 25 minutes - that is 5 minutes before session timeout', function () {
                expect( /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutWarningDelay).toEqual(25 * 60000);
            });
        });
        describe('when sessionTimeoutDelay is 5 minutes', function () {
            beforeAll(function () {
                /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays(5 * 60000);
            });
            it('first session expiration notification should be delayed by 0 minutes - that is 5 minutes before session timeout', function () {
                expect( /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutWarningDelay).toEqual(0);
            });
        });
        describe('when sessionTimeoutDelay is 3 minutes', function () {
            beforeAll(function () {
                /* istanbul ignore next */_SessionUserStore2.default.setSessionTimeoutAndNotificationsDelays(3 * 60000);
            });
            it('first session expiration notification should be delayed by 0 minutes - that is 3 minutes before session timeout', function () {
                expect( /* istanbul ignore next */_SessionUserStore2.default.sessionTimeoutWarningDelay).toEqual(0);
            });
        });
    });
});