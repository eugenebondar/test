/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var /* istanbul ignore next */_reflux = require('reflux'); /* istanbul ignore next */var _reflux2 = _interopRequireDefault(_reflux);

var /* istanbul ignore next */_api = require('../../../Models/ServiceUser/api'); /* istanbul ignore next */var _api2 = _interopRequireDefault(_api);
var /* istanbul ignore next */_api3 = require('../../../Models/Templates/api'); /* istanbul ignore next */var _api4 = _interopRequireDefault(_api3);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var ReportsTemplateDialogActions = {
    initNew: /* istanbul ignore next */_reflux2.default.createAction({ asyncResult: true }),
    initEdit: /* istanbul ignore next */_reflux2.default.createAction({ asyncResult: true }),
    addReportTemplate: /* istanbul ignore next */_reflux2.default.createAction({ asyncResult: true }),
    editReportTemplate: /* istanbul ignore next */_reflux2.default.createAction({ asyncResult: true }),
    destroy: /* istanbul ignore next */_reflux2.default.createAction({ sync: true }) };


ReportsTemplateDialogActions.initNew.listen(function () {
    return fetchOrganizationList().then(this.completed, this.failed);
});

ReportsTemplateDialogActions.initEdit.listen(function (templateId) {
    var organizationListPromise = fetchOrganizationList();
    var reportTemplatePromise = /* istanbul ignore next */_api4.default.fetchTemplate(templateId);

    return Promise.all([organizationListPromise, reportTemplatePromise]).
    then(function ( /* istanbul ignore next */_ref) /* istanbul ignore next */{var _ref2 = _slicedToArray(_ref, 2),organizationsList = _ref2[0],reportTemplate = _ref2[1];return { organizationsList: organizationsList, reportTemplate: reportTemplate };}).
    then(this.completed, this.failed);
});

ReportsTemplateDialogActions.addReportTemplate.listen(function (data) {/* istanbul ignore next */var _this = this;
    /* istanbul ignore next */_api4.default.addTemplate(prepareTemplateParameters(data)).
    then(function (response) /* istanbul ignore next */{return response.json();}).
    then(function (json) {
        (!json.errors ? /* istanbul ignore next */_this.completed : /* istanbul ignore next */_this.failed)(json);
    });
});

ReportsTemplateDialogActions.editReportTemplate.listen(function (templateId, data) {/* istanbul ignore next */var _this2 = this;
    /* istanbul ignore next */_api4.default.editTemplate(templateId, prepareTemplateParameters(data)).
    then(function (response) /* istanbul ignore next */{return response.json();}).
    then(function (json) {
        (!json.errors ? /* istanbul ignore next */_this2.completed : /* istanbul ignore next */_this2.failed)(json);
    });
}); /* istanbul ignore next */exports.default =

ReportsTemplateDialogActions;

function fetchOrganizationList() {
    return (/* istanbul ignore next */_api2.default.fetchOrganizationsList().
        then(function (json) /* istanbul ignore next */{return json.organizations;}));
}

function prepareTemplateParameters(data) {
    var template = {
        name: data.name,
        template_type: data.template_type,
        organization_id: !data.isGlobal ? data.organization_id : null };

    if (data.template) {//empty template file would erase current template file. Template entry cannot exist without a template file.
        template.content = data.template;
    }
    return template;
}