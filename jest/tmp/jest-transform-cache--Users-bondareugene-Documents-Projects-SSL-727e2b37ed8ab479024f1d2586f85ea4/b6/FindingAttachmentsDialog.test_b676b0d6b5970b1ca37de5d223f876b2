/* istanbul ignore next */'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_enzymeToJson = require('enzyme-to-json'); /* istanbul ignore next */var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);
var /* istanbul ignore next */_FindingAttachmentsDialog = require('./FindingAttachmentsDialog'); /* istanbul ignore next */var _FindingAttachmentsDialog2 = _interopRequireDefault(_FindingAttachmentsDialog);
var /* istanbul ignore next */_FindingAttachmentsDialogStore = require('./FindingAttachmentsDialogStore');
var /* istanbul ignore next */_ImportForm = require('../../Modules/TestsDetails/TestRun/Dialogs/ImportForm'); /* istanbul ignore next */var _ImportForm2 = _interopRequireDefault(_ImportForm);
var /* istanbul ignore next */_RemoveReportConfirmationDialog = require('../../Modules/TestsDetails/TestRun/Dialogs/RemoveReportConfirmationDialog'); /* istanbul ignore next */var _RemoveReportConfirmationDialog2 = _interopRequireDefault(_RemoveReportConfirmationDialog);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('FindingAttachmentsDialog', function () {
    describe('with default set of props', function () {
        var component = /* istanbul ignore next */void 0,errorConsole = /* istanbul ignore next */void 0;

        beforeAll(function () {
            errorConsole = spyOn(console, 'error');
        });

        beforeEach(function () {
            component = /* istanbul ignore next */(0, _enzyme.mount)(
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FindingAttachmentsDialog2.default, /* istanbul ignore next */_extends({}, _FindingAttachmentsDialogStore.defaultState, {

                onClose: function /* istanbul ignore next */onClose() /* istanbul ignore next */{return null;},
                onSubmit: function /* istanbul ignore next */onSubmit() /* istanbul ignore next */{return null;},
                withBackground: true,
                isImportButtonDisabled: false,
                importForm:
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ImportForm2.default, /* istanbul ignore next */{
                    updateValue: function /* istanbul ignore next */updateValue() /* istanbul ignore next */{return null;},
                    attachment: /* istanbul ignore next */_FindingAttachmentsDialogStore.defaultState.attachment,
                    onDrop: function /* istanbul ignore next */onDrop() /* istanbul ignore next */{return null;},
                    isBrowseDisabled: /* istanbul ignore next */_FindingAttachmentsDialogStore.defaultState.isBrowseDisabled,
                    fileName: /* istanbul ignore next */_FindingAttachmentsDialogStore.defaultState.fileName,
                    attachments: /* istanbul ignore next */_FindingAttachmentsDialogStore.defaultState.attachments,
                    isLoading: /* istanbul ignore next */_FindingAttachmentsDialogStore.defaultState.isSaving,
                    validation: /* istanbul ignore next */_FindingAttachmentsDialogStore.defaultState.validation,
                    removeFile: function /* istanbul ignore next */removeFile() /* istanbul ignore next */{return null;} }),


                removeReportConfirmationDialog: /* istanbul ignore next */_FindingAttachmentsDialogStore.defaultState.attachmentToRemove &&
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_RemoveReportConfirmationDialog2.default, /* istanbul ignore next */{
                    onSubmit: function /* istanbul ignore next */onSubmit() /* istanbul ignore next */{return null;},
                    onCancel: function /* istanbul ignore next */onCancel() /* istanbul ignore next */{return null;},
                    isDeleting: /* istanbul ignore next */_FindingAttachmentsDialogStore.defaultState.isDeleting,
                    type: 'attachment',
                    reportItem: /* istanbul ignore next */_FindingAttachmentsDialogStore.defaultState.attachmentToRemove }) })));




        });

        it('matches snapshot', function () {
            expect( /* istanbul ignore next */(0, _enzymeToJson2.default)(component)).toMatchSnapshot();
        });

        it('prints no errors from propTypes validation', function () {
            expect(errorConsole).not.toHaveBeenCalled();
        });
    });
});