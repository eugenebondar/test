/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.defaultState = undefined;var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_reflux = require('reflux'); /* istanbul ignore next */var _reflux2 = _interopRequireDefault(_reflux);

var /* istanbul ignore next */_CustomerAccountDialogActions = require('./CustomerAccountDialogActions'); /* istanbul ignore next */var _CustomerAccountDialogActions2 = _interopRequireDefault(_CustomerAccountDialogActions);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var defaultFields = {
    corporation_name: '',
    name: '',
    email: '',
    phone: '',
    catalog_id: '',
    notification_setting: {
        test_created: false,
        test_changed_state_company: false,
        test_changed_state_primary: true,
        test_assigned_company: false,
        test_assigned_primary: false } };



var defaultState = /* istanbul ignore next */exports.defaultState = {
    isLoading: true,
    isSaving: false,
    isError: false,
    validation: null,
    fields: defaultFields,
    catalogs: [] }; /* istanbul ignore next */var


CustomerAccountDialogStore = function (_Reflux$Store) {_inherits(CustomerAccountDialogStore, _Reflux$Store);

    function /* istanbul ignore next */CustomerAccountDialogStore() {/* istanbul ignore next */_classCallCheck(this, CustomerAccountDialogStore);var _this = _possibleConstructorReturn(this, (CustomerAccountDialogStore.__proto__ || Object.getPrototypeOf(CustomerAccountDialogStore)).call(this));


        /* istanbul ignore next */_this.listenables = /* istanbul ignore next */_CustomerAccountDialogActions2.default;

        /* istanbul ignore next */_this.state = /* istanbul ignore next */_extends({}, defaultState); /* istanbul ignore next */return _this;
    }

    /**
       * @listens CustomerAccountDialogActions.initNew
       */_createClass(CustomerAccountDialogStore, [{ key: 'onInitNew', value: function onInitNew()
        {
            this.setState({
                isLoading: true,
                fields: /* istanbul ignore next */_extends({}, defaultFields) });

        }

        /**
           * @listens CustomerAccountDialogActions.initNew.completed
           */ }, { key: 'onInitNewCompleted', value: function onInitNewCompleted(_ref)
        {/* istanbul ignore next */var catalogs = _ref.catalogs;
            this.setState({
                fields: /* istanbul ignore next */_extends({}, defaultFields),
                catalogs: defaultCatalogFirst(catalogs),
                isLoading: false });

        }

        /**
           * @listens CustomerAccountDialogActions.initEdit.completed
           */ }, { key: 'onInitEditCompleted', value: function onInitEditCompleted(_ref2)
        {/* istanbul ignore next */var _ref3 = _slicedToArray(_ref2, 2),customerAccount = _ref3[0],catalogs = _ref3[1].catalogs;
            var customerFields = /* istanbul ignore next */_extends({}, customerAccount);
            this.setState({
                fields: customerFields,
                catalogs: defaultCatalogFirst(catalogs),
                isLoading: false });

        }

        /**
           * @listens CustomerAccountDialogActions.initEdit.failed
           */ }, { key: 'onInitEditFailed', value: function onInitEditFailed()
        {
            this.setState({
                isLoading: false,
                isError: true });

        }

        /**
           * @listens CustomerAccountDialogActions.destroy
           */ }, { key: 'onDestroy', value: function onDestroy()
        {
            this.setState(defaultState);
        }

        /**
           * @listens CustomerAccountDialogActions.createCustomer
           */ }, { key: 'onCreateCustomer', value: function onCreateCustomer()
        {
            this.setState({ isSaving: true });
        }

        /**
           * @listens CustomerAccountDialogActions.createCustomer.completed
           */ }, { key: 'onCreateCustomerCompleted', value: function onCreateCustomerCompleted()
        {
            this.setState({ isSaving: false });
        }

        /**
           * @listens CustomerAccountDialogActions.createCustomer.failed
           */ }, { key: 'onCreateCustomerFailed', value: function onCreateCustomerFailed(_ref4)
        {/* istanbul ignore next */var errors = _ref4.errors;
            this.setState({
                isSaving: false,
                validation: errors });

        }

        /**
           * @listens CustomerAccountDialogActions.updateCustomer
           */ }, { key: 'onUpdateCustomer', value: function onUpdateCustomer()
        {
            this.setState({ isSaving: true });
        }

        /**
           * @listens CustomerAccountDialogActions.updateCustomer.completed
           */ }, { key: 'onUpdateCustomerCompleted', value: function onUpdateCustomerCompleted()
        {
            this.setState({ isSaving: false });
        }

        /**
           * @listens CustomerAccountDialogActions.updateCustomer.failed
           */ }, { key: 'onUpdateCustomerFailed', value: function onUpdateCustomerFailed(_ref5)
        {/* istanbul ignore next */var errors = _ref5.errors;
            this.setState({
                isSaving: false,
                validation: errors });

        } }]);return CustomerAccountDialogStore;}( /* istanbul ignore next */_reflux2.default.Store);

function defaultCatalogFirst(catalogs) {
    return (/* istanbul ignore next */[
        catalogs.find(function (catalog) /* istanbul ignore next */{return catalog.default_catalog;})].concat(_toConsumableArray(
        catalogs.filter(function (catalog) /* istanbul ignore next */{return !catalog.default_catalog;}).sort(sortAsc))));

}
function sortAsc(a, b) {
    return a.name > b.name;
} /* istanbul ignore next */exports.default =

/* istanbul ignore next */_reflux2.default.initStore(CustomerAccountDialogStore);