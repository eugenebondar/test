/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var /* istanbul ignore next */_reflux = require('reflux'); /* istanbul ignore next */var _reflux2 = _interopRequireDefault(_reflux);

var /* istanbul ignore next */_api = require('../../Models/Roles/api'); /* istanbul ignore next */var _api2 = _interopRequireDefault(_api);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var RolesActions = {
    init: /* istanbul ignore next */_reflux2.default.createAction({ asyncResult: true }),
    updateRoles: /* istanbul ignore next */_reflux2.default.createAction({ asyncResult: true }),
    deleteRole: /* istanbul ignore next */_reflux2.default.createAction({ asyncResult: true }),
    changeRequestParams: /* istanbul ignore next */_reflux2.default.createAction({ sync: true }),
    openRoleDialog: /* istanbul ignore next */_reflux2.default.createAction({ sync: true }),
    closeRoleDialog: /* istanbul ignore next */_reflux2.default.createAction({ sync: true }),
    openConfirmationDialog: /* istanbul ignore next */_reflux2.default.createAction({ sync: true }),
    closeConfirmationDialog: /* istanbul ignore next */_reflux2.default.createAction({ sync: true }),
    destroy: /* istanbul ignore next */_reflux2.default.createAction({ sync: true }) };


RolesActions.init.listen(fetchRoles);
RolesActions.updateRoles.listen(fetchRoles);

RolesActions.deleteRole.listen(function (roleId) {
    /* istanbul ignore next */_api2.default.deleteRole(roleId).then(this.completed, this.failed);
}); /* istanbul ignore next */exports.default =

RolesActions;

function fetchRoles(params) {
    /* istanbul ignore next */_api2.default.fetchRoles({ filter: params }, true).
    then(function (response) {
        var total = parseInt(response.headers.get('Total'));
        return response.json().then(function (json) /* istanbul ignore next */{return [json, total];});
    }).
    then(function ( /* istanbul ignore next */_ref) {/* istanbul ignore next */var _ref2 = _slicedToArray(_ref, 2),json = _ref2[0],total = _ref2[1];
        return {
            roles: json.roles,
            rolesTotal: total };

    }).
    then(this.completed, this.failed);
}