/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_counterpart = require('counterpart'); /* istanbul ignore next */var _counterpart2 = _interopRequireDefault(_counterpart);
var /* istanbul ignore next */_reactDropzone = require('react-dropzone'); /* istanbul ignore next */var _reactDropzone2 = _interopRequireDefault(_reactDropzone);
var /* istanbul ignore next */_classnames = require('classnames'); /* istanbul ignore next */var _classnames2 = _interopRequireDefault(_classnames);
var /* istanbul ignore next */_fileExtension = require('file-extension'); /* istanbul ignore next */var _fileExtension2 = _interopRequireDefault(_fileExtension);

var /* istanbul ignore next */_FormField = require('../../../Shared/Elements/Form/FormField'); /* istanbul ignore next */var _FormField2 = _interopRequireDefault(_FormField);

var /* istanbul ignore next */_customizeAccountConfig = require('./customizeAccountConfig');
var /* istanbul ignore next */_FindingAttachmentsTR = require('../../FindingAttachments/FindingAttachmentsTR'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

CustomizeAccountImage = function (_React$Component) {_inherits(CustomizeAccountImage, _React$Component);function CustomizeAccountImage() {_classCallCheck(this, CustomizeAccountImage);return _possibleConstructorReturn(this, (CustomizeAccountImage.__proto__ || Object.getPrototypeOf(CustomizeAccountImage)).apply(this, arguments));}_createClass(CustomizeAccountImage, [{ key: 'render', value: function render()
        {/* istanbul ignore next */var _this2 = this;var _props =
            this.props,type = _props.type,imageSrc = _props.imageSrc,imageStatus = _props.imageStatus,markAsDeleted = _props.markAsDeleted;

            var onClickButtonFunc = imageStatus === /* istanbul ignore next */_customizeAccountConfig.IMAGE_STATUS.DEFAULT ? /* istanbul ignore next */this.markAsDelete.bind(this) : /* istanbul ignore next */this.removeUploaded.bind(this);
            var textForDefault = /* istanbul ignore next */(0, _counterpart2.default)( /* istanbul ignore next */'customers.customize.' + (markAsDeleted ? 'cancelDelete' : 'delete'));
            var textForUpdate = /* istanbul ignore next */(0, _counterpart2.default)( /* istanbul ignore next */'customers.customize.' + (markAsDeleted ?
            'revertToPrevious' :
            'cancelUploading'));

            var buttonText = imageStatus === /* istanbul ignore next */_customizeAccountConfig.IMAGE_STATUS.DEFAULT ? textForDefault : textForUpdate;
            var button = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: onClickButtonFunc }, buttonText);
            var imageClassName = /* istanbul ignore next */(0, _classnames2.default)('branding-image', {
                'waiting-for-delete': markAsDeleted,
                'uploaded-image': imageStatus === /* istanbul ignore next */_customizeAccountConfig.IMAGE_STATUS.UPLOADED,
                'default-image': imageStatus === /* istanbul ignore next */_customizeAccountConfig.IMAGE_STATUS.DEFAULT });

            var fileExt = /* istanbul ignore next */(0, _fileExtension2.default)(imageSrc).toLowerCase();
            var isFileImage = /* istanbul ignore next */_FindingAttachmentsTR.imageExtensions.includes(fileExt);
            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FormField2.default, /* istanbul ignore next */{
                        label: /* istanbul ignore next */(0, _counterpart2.default)( /* istanbul ignore next */'customers.customize.' + type),
                        className: 'branding-image-field',
                        isValid: this.props.isFieldValid,
                        validationMessage: this.props.validationMessage },

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'branding-logo-uploader' },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactDropzone2.default, /* istanbul ignore next */{
                            ref: function /* istanbul ignore next */ref(node) /* istanbul ignore next */{return (/* istanbul ignore next */_this2.dropzone = node);},
                            multiple: false,
                            onDrop: /* istanbul ignore next */this.onDrop.bind(this),
                            className: 'dropzone-wrap' }),

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ onClick: /* istanbul ignore next */this.onOpenClick.bind(this), className: 'browse-btn sc-btn sc-btn-primary-outline' },
                            /* istanbul ignore next */(0, _counterpart2.default)('general.browse')),

                        imageSrc &&
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'branding-image-wrapper' },
                            isFileImage &&
                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: imageClassName },
                                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'img', /* istanbul ignore next */{ src: imageSrc, alt: type })),


                            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'branding-controls' },
                                button)))));






        } }, { key: 'markAsDelete', value: function markAsDelete()

        {/* istanbul ignore next */var
            defaultImageIndex = this.props.defaultImageIndex;
            var imageToDelete = /* istanbul ignore next */_extends({}, this.props.fields.images[defaultImageIndex]);
            if (imageToDelete.waitingForDelete) {
                delete imageToDelete.waitingForDelete;
            } else {
                imageToDelete.waitingForDelete = true;
            }

            var images = /* istanbul ignore next */[].concat(_toConsumableArray(this.props.fields.images));
            images[defaultImageIndex] = imageToDelete;

            this.props.onChange({ images: images });
        } }, { key: 'removeUploaded', value: function removeUploaded()

        {/* istanbul ignore next */var
            uploadedImageIndex = this.props.uploadedImageIndex;
            var uploadedImages = /* istanbul ignore next */[].concat(_toConsumableArray(this.props.uploadedImages));
            uploadedImages.splice(uploadedImageIndex, 1);
            this.props.onImageChange(uploadedImages);
        } }, { key: 'onOpenClick', value: function onOpenClick()

        {
            this.dropzone.open();
        }

        /**
           * Upload file from form.
           * @params {[objects]} [files] array of objects.
           */ }, { key: 'onDrop', value: function onDrop(
        files) {/* istanbul ignore next */var _props2 =
            this.props,type = _props2.type,uploadedImageIndex = _props2.uploadedImageIndex;
            var uploadedImages = /* istanbul ignore next */[].concat(_toConsumableArray(this.props.uploadedImages));
            var image = {
                image_file: files[0],
                image_type: type };

            if (uploadedImageIndex > -1) {
                uploadedImages[uploadedImageIndex] = image;
            } else {
                uploadedImages.push(image);
            }
            this.props.onImageChange(uploadedImages);
        } }]);return CustomizeAccountImage;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */exports.default = CustomizeAccountImage;


CustomizeAccountImage.propTypes = {
    onImageChange: /* istanbul ignore next */_react2.default.PropTypes.func.isRequired,
    onChange: /* istanbul ignore next */_react2.default.PropTypes.func.isRequired,
    validationMessage: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.string),
    isFieldValid: /* istanbul ignore next */_react2.default.PropTypes.bool.isRequired,
    uploadedImages: /* istanbul ignore next */_react2.default.PropTypes.arrayOf(
    /* istanbul ignore next */_react2.default.PropTypes.shape({
        image_file: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired,
        image_type: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired })).

    isRequired,
    fields: /* istanbul ignore next */_react2.default.PropTypes.shape({
        enabled: /* istanbul ignore next */_react2.default.PropTypes.bool.isRequired,
        id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
        images: /* istanbul ignore next */_react2.default.PropTypes.arrayOf(
        /* istanbul ignore next */_react2.default.PropTypes.shape({
            branding_id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
            created_at: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
            id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
            image_file: /* istanbul ignore next */_react2.default.PropTypes.shape({
                url: /* istanbul ignore next */_react2.default.PropTypes.string }).
            isRequired,
            image_type: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
            updated_at: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired })),


        main_color: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired }).
    isRequired,
    type: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
    imageSrc: /* istanbul ignore next */_react2.default.PropTypes.string,
    imageStatus: /* istanbul ignore next */_react2.default.PropTypes.string,
    uploadedImageIndex: /* istanbul ignore next */_react2.default.PropTypes.number.isRequired,
    defaultImageIndex: /* istanbul ignore next */_react2.default.PropTypes.number.isRequired,
    markAsDeleted: /* istanbul ignore next */_react2.default.PropTypes.bool.isRequired };