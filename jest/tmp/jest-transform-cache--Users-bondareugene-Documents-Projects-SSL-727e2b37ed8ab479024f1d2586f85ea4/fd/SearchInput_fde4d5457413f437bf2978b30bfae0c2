/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_classnames = require('classnames'); /* istanbul ignore next */var _classnames2 = _interopRequireDefault(_classnames);

/* istanbul ignore next */require('./SearchInput.less'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectWithoutProperties(obj, keys) {var target = {};for (var i in obj) {if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];}return target;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

/**
rapper of Input element.
var
SearchInput = function (_React$Component) {_inherits(SearchInput, _React$Component);

    function /* istanbul ignore next */SearchInput() {/* istanbul ignore next */_classCallCheck(this, SearchInput);var _this = _possibleConstructorReturn(this, (SearchInput.__proto__ || Object.getPrototypeOf(SearchInput)).call(this));


        /* istanbul ignore next */_this.focusOnInput = /* istanbul ignore next */ /* istanbul ignore next */_this.focusOnInput.bind(_this); /* istanbul ignore next */return _this;
    }_createClass(SearchInput, [{ key: 'componentDidMount', value: function componentDidMount()

        {
            if (this.props.autoFocus) {
                this.focusOnInput();
            }
        } }, { key: 'focusOnInput', value: function focusOnInput()

        {
            if (this.input) {
                this.input.focus();
            }
        } }, { key: 'render', value: function render()

        {/* istanbul ignore next */var _this2 = this;var _props =
            this.props,onClear = _props.onClear,propsToPassFurther = _objectWithoutProperties(_props, ['onClear']);

            var divContainerClassName = /* istanbul ignore next */(0, _classnames2.default)(
            'search-input', {
                'disabled-filter': this.props.disabled });



            var inputClassName = /* istanbul ignore next */(0, _classnames2.default)(
            'search-input-input sc-form-ele',
            this.props.className);


            var displayMagnifierButton = !onClear || onClear && !this.props.value;
            var displayCleanButton = onClear && this.props.value;
            var magnifierClassNames = /* istanbul ignore next */(0, _classnames2.default)('search-input-magnifier sc-icon-magnifier', {
                'search-input-magnifier--visible': displayMagnifierButton,
                'search-input-magnifier--hidden': displayCleanButton });

            var clearClassNames = /* istanbul ignore next */(0, _classnames2.default)('search-input-clear sc-icon-circle-remove-btn', {
                'search-input-magnifier--hidden': displayMagnifierButton,
                'search-input-magnifier--visible': displayCleanButton });


            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: divContainerClassName },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'input', /* istanbul ignore next */_extends({}, propsToPassFurther, {
                        type: 'text',
                        autoComplete: 'off',
                        className: inputClassName,
                        ref: function /* istanbul ignore next */ref(input) {
                            /* istanbul ignore next */_this2.input = input;
                        } })),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: magnifierClassNames,
                        onClick: this.focusOnInput }),
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: clearClassNames,
                        onClick: function /* istanbul ignore next */onClick() {
                            /* istanbul ignore next */_this2.focusOnInput();
                            /* istanbul ignore next */_this2.props.onClear();
                        } })));

        } }]);return SearchInput;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */exports.default = SearchInput;


SearchInput.propTypes = {
    /**
                           * autoFocus on input when component is mounted
                           */
    autoFocus: /* istanbul ignore next */_react2.default.PropTypes.bool,
    /**
                                                                          * disabled component if true
                                                                          */
    disabled: /* istanbul ignore next */_react2.default.PropTypes.bool,
    /**
                                                                         * extra className for component
                                                                         */
    className: /* istanbul ignore next */_react2.default.PropTypes.string,
    onClear: /* istanbul ignore next */_react2.default.PropTypes.func,
    value: /* istanbul ignore next */_react2.default.PropTypes.string };