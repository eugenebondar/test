/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_counterpart = require('counterpart'); /* istanbul ignore next */var _counterpart2 = _interopRequireDefault(_counterpart);
var /* istanbul ignore next */_deepEqual = require('deep-equal'); /* istanbul ignore next */var _deepEqual2 = _interopRequireDefault(_deepEqual);

var /* istanbul ignore next */_LoadingModalDialog = require('../../../Shared/Elements/LoadingModalDialog/LoadingModalDialog'); /* istanbul ignore next */var _LoadingModalDialog2 = _interopRequireDefault(_LoadingModalDialog);
var /* istanbul ignore next */_UserForm = require('./UserForm'); /* istanbul ignore next */var _UserForm2 = _interopRequireDefault(_UserForm);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

UserDialog = function (_React$PureComponent) {_inherits(UserDialog, _React$PureComponent);
    function /* istanbul ignore next */UserDialog(props) {/* istanbul ignore next */_classCallCheck(this, UserDialog);var _this = _possibleConstructorReturn(this, (UserDialog.__proto__ || Object.getPrototypeOf(UserDialog)).call(this,
        props));
        /* istanbul ignore next */_this.state = {
            fields: props.fields };


        /* istanbul ignore next */_this.onChange = /* istanbul ignore next */ /* istanbul ignore next */_this.onChange.bind(_this);
        /* istanbul ignore next */_this.onChangeType = /* istanbul ignore next */ /* istanbul ignore next */_this.onChangeType.bind(_this);
        /* istanbul ignore next */_this.getRolesOptions = /* istanbul ignore next */ /* istanbul ignore next */_this.getRolesOptions.bind(_this);
        /* istanbul ignore next */_this.getListOfVisibleRoles = /* istanbul ignore next */ /* istanbul ignore next */_this.getListOfVisibleRoles.bind(_this); /* istanbul ignore next */return _this;
    }_createClass(UserDialog, [{ key: 'componentWillReceiveProps', value: function componentWillReceiveProps(

        nextProps) {
            if (! /* istanbul ignore next */(0, _deepEqual2.default)(nextProps.fields, this.props.fields)) {
                this.setState({
                    fields: nextProps.fields,
                    fieldsCache: nextProps.fields });

            }
        } }, { key: 'render', value: function render()

        {
            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_LoadingModalDialog2.default, /* istanbul ignore next */{
                        loading: this.props.isLoading || this.props.isSaving,
                        isOpen: /* istanbul ignore next */true,
                        header: this.getDialogTitle(),
                        footer: this.getDialogFooter() },

                    !this.props.isLoading &&
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_UserForm2.default, /* istanbul ignore next */{
                        fields: this.state.fields,
                        onChange: this.onChange,
                        isService: this.props.isService,
                        isEdit: this.props.isEdit,
                        organizationsList: this.props.organizationsList,
                        rolesOptions: this.getRolesOptions(),
                        validation: this.props.validation,
                        currentUserId: this.props.currentUserId,
                        onChangeType: this.onChangeType })));




        } }, { key: 'getRolesOptions', value: function getRolesOptions()

        {
            return this.getListOfVisibleRoles().map(function (role) /* istanbul ignore next */{return {
                    title: role.name,
                    value: role.id };});

        } }, { key: 'onChangeType', value: function onChangeType(

        key, value) {/* istanbul ignore next */var _onChange;
            var organization_id = value === /* istanbul ignore next */_UserForm.USER_TYPE.CUSTOMER && this.props.organizationsList.length > 0 ? this.props.organizationsList[0].id : '';
            var rolesList = this.getListOfVisibleRoles(value);
            var roleId = rolesList.length > 0 ? rolesList[0].id : '';
            this.onChange( /* istanbul ignore next */(_onChange = {}, _defineProperty(_onChange,
            key, value), _defineProperty(_onChange, 'role_id',
            roleId), _defineProperty(_onChange, 'organization_id',
            organization_id), _onChange));

        } }, { key: 'getListOfVisibleRoles', value: function getListOfVisibleRoles()

        {/* istanbul ignore next */var organizationId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.fields.organization_id;
            var rolesList = this.props.roles[this.props.isService ? this.state.fields.user_type : 'customer'];
            if (organizationId) {
                return rolesList.filter(function (role) /* istanbul ignore next */{return !role.organization_id || role.organization_id === organizationId;});
            }
            return rolesList;
        } }, { key: 'onChange', value: function onChange(

        updatedField) {
            this.setState({
                fields: /* istanbul ignore next */_extends({}, this.state.fields, updatedField) });

        } }, { key: 'getDialogTitle', value: function getDialogTitle()

        {
            return this.props.isEdit ? /* istanbul ignore next */(0, _counterpart2.default)('users.editUser') : /* istanbul ignore next */(0, _counterpart2.default)('users.addUser');
        } }, { key: 'getDialogFooter', value: function getDialogFooter()

        {/* istanbul ignore next */var _this2 = this;
            var areFieldsNotChanged = /* istanbul ignore next */(0, _deepEqual2.default)(this.state.fields, this.state.fieldsCache);
            var saveButton = this.props.isEdit ? /* istanbul ignore next */(0, _counterpart2.default)('general.save') : /* istanbul ignore next */(0, _counterpart2.default)('general.add');
            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'modal-btn-wrap' },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'cancel-btn sc-btn', onClick: this.props.onClose },
                        /* istanbul ignore next */(0, _counterpart2.default)('customers.popup.cancel')),

                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{
                            className: 'sc-btn sc-btn-primary',
                            onClick: function /* istanbul ignore next */onClick() /* istanbul ignore next */{return (/* istanbul ignore next */_this2.props.onSubmit( /* istanbul ignore next */_this2.state.fields));},
                            disabled: areFieldsNotChanged || this.props.isLoading || this.props.isSaving },

                        saveButton)));



        } }]);return UserDialog;}( /* istanbul ignore next */_react2.default.PureComponent); /* istanbul ignore next */exports.default = UserDialog;


UserDialog.propTypes = {
    isEdit: /* istanbul ignore next */_react2.default.PropTypes.bool.isRequired,
    isService: /* istanbul ignore next */_react2.default.PropTypes.bool.isRequired,
    isSaving: /* istanbul ignore next */_react2.default.PropTypes.bool.isRequired,
    isLoading: /* istanbul ignore next */_react2.default.PropTypes.bool.isRequired,
    currentUserId: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
    roles: /* istanbul ignore next */_react2.default.PropTypes.shape({
        customer: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({
            id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
            name: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
            organization_id: /* istanbul ignore next */_react2.default.PropTypes.string,
            role_type: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired })).
        isRequired,
        staff: /* istanbul ignore next */_react2.default.PropTypes.arrayOf( /* istanbul ignore next */_react2.default.PropTypes.shape({
            id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
            name: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
            organization_id: /* istanbul ignore next */_react2.default.PropTypes.string,
            role_type: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired })).
        isRequired }),

    fields: /* istanbul ignore next */_react2.default.PropTypes.shape({
        id: /* istanbul ignore next */_react2.default.PropTypes.string,
        user_type: /* istanbul ignore next */_react2.default.PropTypes.string,
        organization_id: /* istanbul ignore next */_react2.default.PropTypes.string,
        first_name: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
        last_name: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
        email: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
        role_id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired }),

    organizationsList: /* istanbul ignore next */_react2.default.PropTypes.arrayOf(
    /* istanbul ignore next */_react2.default.PropTypes.shape({
        corporation_name: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
        id: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired })),


    validation: /* istanbul ignore next */_react2.default.PropTypes.shape({
        first_name: /* istanbul ignore next */_react2.default.PropTypes.string,
        last_name: /* istanbul ignore next */_react2.default.PropTypes.string,
        email: /* istanbul ignore next */_react2.default.PropTypes.string }),

    onClose: /* istanbul ignore next */_react2.default.PropTypes.func.isRequired,
    onSubmit: /* istanbul ignore next */_react2.default.PropTypes.func.isRequired };