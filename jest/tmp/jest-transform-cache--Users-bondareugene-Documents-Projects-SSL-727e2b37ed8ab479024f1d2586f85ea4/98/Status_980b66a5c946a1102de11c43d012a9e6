/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();









var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_classnames = require('classnames'); /* istanbul ignore next */var _classnames2 = _interopRequireDefault(_classnames);

var /* istanbul ignore next */_StatusLabel = require('../../../StatusLabel'); /* istanbul ignore next */var _StatusLabel2 = _interopRequireDefault(_StatusLabel);
var /* istanbul ignore next */_counterpart = require('counterpart'); /* istanbul ignore next */var _counterpart2 = _interopRequireDefault(_counterpart);
var /* istanbul ignore next */_User = require('../../../../Stores/SessionUser/User'); /* istanbul ignore next */var _User2 = _interopRequireDefault(_User);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  * Text representing a table's td value with type status.
module TableBoard/Elements/Table/Cells/Status
version 1.0.0
requires React

author Yevhen Bondar
copyright (c) 2016 SoftServe.
var UnclickableStates = ['needs_configuration', 'Needs configuration', 'expired_state', 'Expired state', 'Expired'];var UnclickableExpiredStates = ['completed', 'Completed'];
var RequiredPermissions = [
/* istanbul ignore next */_User.STAFF_PERMISSIONS.CHANGE_TESTS_STATUS]; /* istanbul ignore next */var


Status = function (_React$Component) {_inherits(Status, _React$Component);
    function /* istanbul ignore next */Status(props) {/* istanbul ignore next */_classCallCheck(this, Status);var _this = _possibleConstructorReturn(this, (Status.__proto__ || Object.getPrototypeOf(Status)).call(this,
        props));
        /* istanbul ignore next */_this.checkForClickable = /* istanbul ignore next */_this.checkForClickable.bind( /* istanbul ignore next */_this);
        /* istanbul ignore next */_this.openChangeStatusPopup = /* istanbul ignore next */_this.openChangeStatusPopup.bind( /* istanbul ignore next */_this);
        /* istanbul ignore next */_this.expandTrigger = /* istanbul ignore next */_this.expandTrigger.bind( /* istanbul ignore next */_this); /* istanbul ignore next */return _this;
    }_createClass(Status, [{ key: 'render', value: function render()

        {/* istanbul ignore next */var _props =
            this.props,value = _props.value,expansion = _props.expansion,isExpand = _props.isExpand;
            var buttonClass = /* istanbul ignore next */(0, _classnames2.default)('expand-btn', {
                'expand': isExpand });

            var popupButtonClass = /* istanbul ignore next */(0, _classnames2.default)('sc-txt-primary test-table-cell-wrap', {
                'pointer': this.checkForClickable() });

            //quick fix: sometimes value passed is a value of test status (e.g. 'in_progress') and sometimes a text display (.e.g 'In progress')(in english)
            //we want to have always something like 'in_progress
            var safeValue = value.toLowerCase().replace(/ /g, '_');
            var content = value === '' ? '-' :
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{
                    onClick: this.openChangeStatusPopup,
                    className: popupButtonClass },

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'status__label' },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_StatusLabel2.default, /* istanbul ignore next */{ value: safeValue }),
                    /* istanbul ignore next */(0, _counterpart2.default)( /* istanbul ignore next */'dashboard.state.' + safeValue)));



            var button = expansion ?
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: buttonClass, onClick: this.expandTrigger },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: isExpand ? 'sc-icon-down-arrow' : 'sc-icon-right-arrow' })) :

            null;
            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: expansion ? 'expand-cell-wrap' : '' },
                    button,
                    content));


        } }, { key: 'checkForClickable', value: function checkForClickable()

        {/* istanbul ignore next */var _props2 =
            this.props,value = _props2.value,isService = _props2.isService,test = _props2.test; /* istanbul ignore next */var
            currentUser = this.context.currentUser;
            if (UnclickableStates.includes(value) || test.expired && UnclickableExpiredStates.includes(value)) {
                return false;
            }
            return (
                isService && currentUser.hasOneOfPermissions(RequiredPermissions));

        } }, { key: 'openChangeStatusPopup', value: function openChangeStatusPopup()

        {
            if (this.checkForClickable()) {/* istanbul ignore next */var _props3 =
                this.props,openChangeStatusPopup = _props3.openChangeStatusPopup,value = _props3.value;
                openChangeStatusPopup(value);
            }
        } }, { key: 'expandTrigger', value: function expandTrigger()

        {/* istanbul ignore next */var _props4 =
            this.props,expansion = _props4.expansion,expandTrigger = _props4.expandTrigger;
            if (expansion) {
                expandTrigger();
            }
        } }]);return Status;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */exports.default = Status;


Status.propTypes = {
    value: /* istanbul ignore next */_react2.default.PropTypes.string,
    expandTrigger: /* istanbul ignore next */_react2.default.PropTypes.func,
    openChangeStatusPopup: /* istanbul ignore next */_react2.default.PropTypes.func,
    isService: /* istanbul ignore next */_react2.default.PropTypes.bool,
    expansion: /* istanbul ignore next */_react2.default.PropTypes.bool,
    isExpand: /* istanbul ignore next */_react2.default.PropTypes.bool,
    test: /* istanbul ignore next */_react2.default.PropTypes.object };

Status.contextTypes = {
    currentUser: /* istanbul ignore next */_react2.default.PropTypes.instanceOf( /* istanbul ignore next */_User2.default).isRequired };