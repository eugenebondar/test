/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_Actions = require('../Actions');

var /* istanbul ignore next */_api = require('../Models/Tests/api'); /* istanbul ignore next */var _api2 = _interopRequireDefault(_api);
var /* istanbul ignore next */_api3 = require('../Models/Findings/api'); /* istanbul ignore next */var _api4 = _interopRequireDefault(_api3);
var /* istanbul ignore next */_FindingModel = require('../Models/Findings/FindingModel'); /* istanbul ignore next */var _FindingModel2 = _interopRequireDefault(_FindingModel);

var /* istanbul ignore next */_SessionUserStore = require('./SessionUser/SessionUserStore'); /* istanbul ignore next */var _SessionUserStore2 = _interopRequireDefault(_SessionUserStore);
var /* istanbul ignore next */_BaseStore2 = require('./BaseStore'); /* istanbul ignore next */var _BaseStore3 = _interopRequireDefault(_BaseStore2);
var /* istanbul ignore next */_counterpart = require('counterpart'); /* istanbul ignore next */var _counterpart2 = _interopRequireDefault(_counterpart);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var maxFileSize = 26214400;
/**
                             * @classdesc Class representing a Test Details Store.
                             * @class
                             */ /* istanbul ignore next */var

TestDetailsStore = function (_BaseStore) {_inherits(TestDetailsStore, _BaseStore);
    function /* istanbul ignore next */TestDetailsStore() {/* istanbul ignore next */_classCallCheck(this, TestDetailsStore);var _this = _possibleConstructorReturn(this, (TestDetailsStore.__proto__ || Object.getPrototypeOf(TestDetailsStore)).call(this,
        [/* istanbul ignore next */_Actions.TestDetailsActions]));
        /* istanbul ignore next */_this.testDetails = null;
        /* istanbul ignore next */_this.findingsList = null;
        /* istanbul ignore next */_this.findingsDetails = null;
        /* istanbul ignore next */_this.findingSubmitted = false;
        /* istanbul ignore next */_this.findingCategories = null;
        /* istanbul ignore next */_this.findingClassifications = null;
        /* istanbul ignore next */_this.findingTypes = null;
        /* istanbul ignore next */_this.assessmentRuns = null;
        /* istanbul ignore next */_this.isService = null;
        /* istanbul ignore next */_this.listenTo( /* istanbul ignore next */_SessionUserStore2.default, /* istanbul ignore next */_this.output); /* istanbul ignore next */return _this;
    }
    /**
       * Listener for SessionStore Store.
       * Set isService according with SessionStore's currentUser.
       * @param {event} [event]
       * @param {data} [data]
       * @config {Bool} set isService.
       */_createClass(TestDetailsStore, [{ key: 'output', value: function output(
        event, data) {
            switch (event) {
                case 'isService':
                    this.isService = data;
                    break;}

        } }, { key: 'fetchTestDetails', value: function fetchTestDetails(

        id, filter) {/* istanbul ignore next */var _this2 = this;
            if (this.isService !== null) {
                /* istanbul ignore next */_api2.default.fetchTestDetails(id, this.isService, filter).
                then(function (json) {
                    /* istanbul ignore next */_this2.testDetails = json;
                    /* istanbul ignore next */_this2.trigger('siteTestDetailsInfo', /* istanbul ignore next */_this2.testDetails);
                }).catch(function (e) {
                    /* istanbul ignore next */_this2.trigger('redirectToHome', true);
                });
            }
        }
        /**
           * Update test status.
           * @param {String} [id] - test's id.
           * @param {String} [data] - new status.
           * @param {Boolean} [isCompletedNeedForUpdate] - new status.
           * @trigger {Bool} [testStatusUpdated] - response status.
           */ }, { key: 'updateStatus', value: function updateStatus(
        id, data, isCompletedNeedForUpdate) {/* istanbul ignore next */var _this3 = this;
            /* istanbul ignore next */_api2.default.updateStatus(id, data).
            then(function (response) {
                var arrayToUpdate = ['Active'];
                isCompletedNeedForUpdate ? arrayToUpdate.push('Completed') : null;
                /* istanbul ignore next */_this3.trigger('testStatusUpdated', {
                    status: response.statusText === 'OK',
                    update: arrayToUpdate });

            });
        }
        /**
           * Update test schedule.
           * @param {Object} [data] - new data.
           * @param {String} [id] - test's id.
           * @trigger {Object} [updateSiteTestDetailsInfo] - object with test's id.
           * @trigger {Bool} [testRunSchedulerUpdated] - response status.
           */ }, { key: 'updateScheduler', value: function updateScheduler(
        data, id) {/* istanbul ignore next */var _this4 = this;
            /* istanbul ignore next */_api2.default.updateScheduler(data, id).
            then(function (response) {
                if (response.status === 422) {
                    response.json().then(function (json) {
                        /* istanbul ignore next */_this4.trigger('testRunSchedulerUpdateError', json.errors);
                    });
                }
                if (response.statusText === 'OK') {
                    /* istanbul ignore next */_this4.trigger('updateSiteTestDetailsInfo', { id: id });
                    /* istanbul ignore next */_this4.trigger('testRunSchedulerUpdated', true);
                }
            });
        } }, { key: 'updateTestInfo', value: function updateTestInfo(
        data, id) {/* istanbul ignore next */var _this5 = this;
            /* istanbul ignore next */_api2.default.updateTestInfo(data, id, this.isService).
            then(function (response) {
                /* istanbul ignore next */_this5.checkValidation(response, 'contactsValidation');
                /* istanbul ignore next */_this5.trigger('testRunInfoUpdated', response.statusText === 'OK');
            });
        } }, { key: 'updateTestComment', value: function updateTestComment(
        data, id) {/* istanbul ignore next */var _this6 = this;
            /* istanbul ignore next */_api2.default.updateTestComment(data, id, this.isService).
            then(function (response) {
                /* istanbul ignore next */_this6.trigger('testRunInfoUpdated', response.statusText === 'OK');
            });
        } }, { key: 'requestTest', value: function requestTest(
        id, testType) {/* istanbul ignore next */var _this7 = this;
            /* istanbul ignore next */_api2.default.requestTest(id).then(function (response) {
                /* istanbul ignore next */_this7.trigger('testStatusUpdated', {
                    status: response.statusText === 'OK',
                    update: testType });

            });
        } }, { key: 'respondTest', value: function respondTest(
        id, testType) {/* istanbul ignore next */var _this8 = this;
            /* istanbul ignore next */_api2.default.respondTest(id).then(function (response) {
                /* istanbul ignore next */_this8.trigger('testStatusUpdated', {
                    status: response.statusText === 'OK',
                    update: testType });

            });
        } }, { key: 'importFile', value: function importFile(
        data) {/* istanbul ignore next */var _this9 = this;
            var file = this.prepareImportFile(data);
            if (this.checkFileSize(data, 'reportValidation')) {
                /* istanbul ignore next */_api2.default.importFile(file).
                then(function (response) {
                    if (data.attachable_type === 'run') {
                        /* istanbul ignore next */_this9.trigger('reportImported', response.statusText === 'OK');
                    } else if (data.attachable_type === 'test') {
                        //TODO remove it in future
                        /* istanbul ignore next */_this9.fetchTestDetails(data.attachable_id, /* istanbul ignore next */_this9.isService);
                        /* istanbul ignore next */_this9.trigger('getSiteTestDetailsInfo', response.statusText === 'OK');
                    }
                });
            }
        } }, { key: 'multiplyImportDocuments', value: function multiplyImportDocuments(
        data) {/* istanbul ignore next */var _this10 = this;
            var file = this.prepareImportFile(data);
            if (this.checkFileSize(data)) {
                /* istanbul ignore next */_api2.default.importFile(file).
                then(function (response) {
                    if (response.status === 422) {
                        response.json().then(function (json) {
                            var validation = {};
                            for (var key in json.errors) {
                                validation[key] = json.errors[key].join(', ');
                            }
                            /* istanbul ignore next */_this10.trigger('multiplyDocumentValidation', {
                                validation: validation,
                                id: data.id });

                        });
                    }
                    /* istanbul ignore next */_this10.trigger('multiplyDocumentImported', {
                        status: response.statusText === 'OK',
                        id: data.id });
                });
            } else {
                var validation = {};
                validation['file'] = [/* istanbul ignore next */(0, _counterpart2.default)('errors.fileIsTooBig')];
                this.trigger('multiplyDocumentValidation', {
                    validation: validation,
                    id: data.id });

            }
        } }, { key: 'importDocument', value: function importDocument(
        data) {/* istanbul ignore next */var _this11 = this;
            var file = this.prepareImportFile(data);
            if (this.checkFileSize(data, 'documentValidation')) {
                /* istanbul ignore next */_api2.default.importFile(file).
                then(function (response) {
                    /* istanbul ignore next */_this11.checkValidation(response, 'documentValidation');
                    /* istanbul ignore next */_this11.trigger('documentImported', response.statusText === 'OK');
                });
            }
        } }, { key: 'importReport', value: function importReport(
        data) {/* istanbul ignore next */var _this12 = this;
            var file = this.prepareImportFile(data);
            if (this.checkFileSize(data, 'reportValidation')) {
                /* istanbul ignore next */_api2.default.importFile(file).
                then(function (response) {
                    /* istanbul ignore next */_this12.checkValidation(response, 'reportValidation');
                    /* istanbul ignore next */_this12.trigger('reportImported', response.statusText === 'OK');
                });
            }
        } }, { key: 'prepareImportFile', value: function prepareImportFile(
        data) {
            var file = new FormData();
            file.append('file', data.file);
            file.append('attachable_type', data.attachable_type);
            file.append('attachable_id', data.attachable_id);
            file.append('type', data.type);
            file.append('name', data.name);
            return file;
        } }, { key: 'checkFileSize', value: function checkFileSize(
        data, triggerName) {
            var isTooBig = data.file.size > maxFileSize;
            if (isTooBig) {
                this.validation = {};
                this.validation['file'] = [/* istanbul ignore next */(0, _counterpart2.default)('errors.fileIsTooBig')];
                triggerName ? this.trigger(triggerName, this.validation) : null;
            }
            return !isTooBig;
        } }, { key: 'deleteReport', value: function deleteReport(
        id, data) {/* istanbul ignore next */var _this13 = this;
            /* istanbul ignore next */_api2.default.deleteAttachment(id, data).
            then(function (response) {
                /* istanbul ignore next */_this13.trigger('reportDeleted', response.statusText === 'OK');
            });
        } }, { key: 'deleteAttachment', value: function deleteAttachment(
        id, data, testId) {/* istanbul ignore next */var _this14 = this;
            /* istanbul ignore next */_api2.default.deleteAttachment(id, data).
            then(function (response) {
                if (response.statusText === 'OK') {
                    // TODO remove from store
                    /* istanbul ignore next */_this14.fetchTestDetails(testId, /* istanbul ignore next */_this14.isService);
                }
            });
        }
        // Findings
    }, { key: 'getFindings', value: function getFindings(id, filter) {/* istanbul ignore next */var _this15 = this;
            /* istanbul ignore next */_api4.default.getFindings(id, this.isService, { filter: filter }).
            then(function (response) {
                var total = parseInt(response.headers.get('Total'));
                return response.json().then(function (json) /* istanbul ignore next */{return [json, total];});
            }).
            then(function ( /* istanbul ignore next */_ref) {/* istanbul ignore next */var _ref2 = _slicedToArray(_ref, 2),json = _ref2[0],total = _ref2[1];
                /* istanbul ignore next */_this15.findingsList = json;
                /* istanbul ignore next */_this15.findingsList.findings = json.findings.map(function (item) {
                    return new /* istanbul ignore next */_FindingModel2.default(item).data;
                });
                var result = {
                    array: /* istanbul ignore next */_this15.findingsList,
                    total: json.total || -1,
                    totalFiltered: total };

                /* istanbul ignore next */_this15.trigger('findingsList', result);
            });
        } }, { key: 'getFindingDetails', value: function getFindingDetails(
        runId, findingId) {/* istanbul ignore next */var _this16 = this;
            /* istanbul ignore next */_api4.default.getFindingDetails(runId, findingId, this.isService).
            then(function (json) {
                /* istanbul ignore next */_this16.findingsDetails = json;
                /* istanbul ignore next */_this16.trigger('findingsDetails', /* istanbul ignore next */_this16.findingsDetails);
            });
        } }, { key: 'editFindingDetails', value: function editFindingDetails(
        runId, findingId, newData) {/* istanbul ignore next */var _this17 = this;
            /* istanbul ignore next */_api4.default.editFindingDetails(runId, findingId, newData, this.isService).
            then(function (response) {
                /* istanbul ignore next */_this17.checkValidation(response, 'findingValidation');
                /* istanbul ignore next */_this17.trigger('findingUpdated', response.statusText === 'OK');
            }).
            catch(function (error) {
            });
        } }, { key: 'addFinding', value: function addFinding(
        runId, newData) {/* istanbul ignore next */var _this18 = this;
            /* istanbul ignore next */_api4.default.addFinding(runId, newData).
            then(function (response) {
                /* istanbul ignore next */_this18.checkValidation(response, 'findingValidation');
                if (response.statusText === 'OK') {
                    /* istanbul ignore next */_this18.trigger('findingSubmitted', response.statusText === 'OK');
                }
            }).
            catch(function (error) {
            });
        }
        // Dictionary
    }, { key: 'getFindingCategories', value: function getFindingCategories() {/* istanbul ignore next */var _this19 = this;
            /* istanbul ignore next */_api4.default.getFindingCategories().
            then(function (json) {
                /* istanbul ignore next */_this19.findingCategories = json.finding_classification_categories;
                /* istanbul ignore next */_this19.trigger('findingCategories', /* istanbul ignore next */_this19.findingCategories);
            });
        } }, { key: 'fetchFindingClassification', value: function fetchFindingClassification(
        id) {/* istanbul ignore next */var _this20 = this;
            /* istanbul ignore next */_api4.default.fetchFindingClassification(id).
            then(function (json) {
                /* istanbul ignore next */_this20.findingClassifications = json.classifications;
                /* istanbul ignore next */_this20.trigger('findingClassifications', /* istanbul ignore next */_this20.findingClassifications);
            });
        } }, { key: 'fetchFindingTypes', value: function fetchFindingTypes()
        {/* istanbul ignore next */var _this21 = this;
            /* istanbul ignore next */_api4.default.fetchFindingTypes().
            then(function (json) {
                /* istanbul ignore next */_this21.findingTypes = json.finding_types;
                /* istanbul ignore next */_this21.trigger('findingTypes', /* istanbul ignore next */_this21.findingTypes);
            });
        } }, { key: 'getFindingsCount', value: function getFindingsCount(
        runId, count_type) {/* istanbul ignore next */var _this22 = this;
            /* istanbul ignore next */_api4.default.getFindingsCount(this.isService, runId, { count_type: count_type }).
            then(function (response) {
                /* istanbul ignore next */_this22.trigger('findingCountUpdated', { count_type: count_type, runId: runId, count: response.count });
            });
        } }, { key: 'getAssessmentRuns', value: function getAssessmentRuns(
        data) {/* istanbul ignore next */var _this23 = this;
            /* istanbul ignore next */_api2.default.getAssessmentRuns(data).
            then(function (response) {
                response.json().then(function (json) {
                    /* istanbul ignore next */_this23.assessmentRuns = json.assessment_run_ids && json.assessment_run_ids.length ? json.assessment_run_ids : [];
                    /* istanbul ignore next */_this23.trigger('AssessmentRunsLoaded', /* istanbul ignore next */_this23.assessmentRuns);
                });
            });
        } }, { key: 'importFindings', value: function importFindings(
        data) {/* istanbul ignore next */var _this24 = this;
            /* istanbul ignore next */_api2.default.importFindings(data).
            then(function (response) {
                /* istanbul ignore next */_this24.checkImportStatus(response);
            });
        } }, { key: 'importNessus', value: function importNessus(
        data) {/* istanbul ignore next */var _this25 = this;
            var file = new FormData();
            for (var key in data) {
                file.append(key, data[key]);
            }
            /* istanbul ignore next */_api2.default.importNessus(file).
            then(function (response) {
                /* istanbul ignore next */_this25.checkImportStatus(response);
            });
        } }, { key: 'checkImportStatus', value: function checkImportStatus(
        response) {/* istanbul ignore next */var _this26 = this;
            if (response.status === 422) {
                response.json().then(function (json) {
                    /* istanbul ignore next */_this26.trigger('findingsImported', false);
                    /* istanbul ignore next */_this26.trigger('findingsImportValidation', json.errors);
                    return false;
                });
            } else {
                this.trigger('findingsImported', response.statusText === 'OK');
            }
        }

        //Report Configuration
    }, { key: 'reportDownloadCoverAndTemplate', value: function reportDownloadCoverAndTemplate(id) {
            var coverTemplateUrl = /* istanbul ignore next */_api2.default.reportDownloadCoverTemplateUrl(id);
            var templateUrl = /* istanbul ignore next */_api2.default.reportDownloadTemplateUrl(id);

            this.trigger('reportCoverAndTemplateLinks',
            { cover: { url: coverTemplateUrl }, template: { url: templateUrl, name: 'sample_template_file' } });
        }
        //Report Preview
    }, { key: 'reportConfigureFilePreview', value: function reportConfigureFilePreview(id, data) {
            /* istanbul ignore next */_api2.default.reportConfigurePreview(id, this.prepareReportParameters(data)).
            then(function (response) {
                this.checkValidation(response, 'reportGenerationErrors');
                if (response.statusText === 'OK') {
                    response.blob().then(function (blobFile) {
                        var reportUrl = window.URL.createObjectURL(blobFile);
                        var contentDispositionHeader = response.headers.get('Content-Disposition');
                        var filename = contentDispositionHeader.match(/filename="(.+)"/)[1];

                        this.trigger('openReportPreview', { url: reportUrl, filename: filename });
                    }.bind(this));
                } else {
                    this.trigger('openReportPreview', null);
                }
            }.bind(this));
        }
        //Report Generate
    }, { key: 'reportConfigureFileGenerate', value: function reportConfigureFileGenerate(id, data, testId) {
            /* istanbul ignore next */_api2.default.reportConfigureGenerate(id, this.prepareReportParameters(data)).
            then(function (response) {
                this.checkValidation(response, 'reportGenerationErrors');
                if (response.statusText === 'Created') {
                    response.json().then(function (json) {
                        this.trigger('reportGeneratedAndAttached', json);
                        this.fetchTestDetails(testId, this.isService);
                    }.bind(this));
                } else {
                    this.trigger('reportGeneratedAndAttached', null);
                }
            }.bind(this));
        }
        //Report Parameters
    }, { key: 'prepareReportParameters', value: function prepareReportParameters(data) {
            return {
                name: data.reportName,
                cover: data.cover,
                template: data.template,
                override: data.override,
                classification_group_id: data.classificationGroupId };

        } }, { key: 'checkValidation', value: function checkValidation(

        response, triggerName) {/* istanbul ignore next */var _this27 = this;
            if (response.status === 422) {
                response.json().then(function (json) {
                    /* istanbul ignore next */_this27.validation = {};
                    for (var key in json.errors) {
                        /* istanbul ignore next */_this27.validation[key] = json.errors[key].join(', ');
                    }
                    triggerName ? /* istanbul ignore next */_this27.trigger(triggerName, /* istanbul ignore next */_this27.validation) : null;
                });
            }
            return null;
        } }, { key: 'updateTrigger', value: function updateTrigger(
        trigger, value) {
            this.trigger(trigger, value);
        } }]);return TestDetailsStore;}(_BaseStore3.default); /* istanbul ignore next */exports.default =


new TestDetailsStore();