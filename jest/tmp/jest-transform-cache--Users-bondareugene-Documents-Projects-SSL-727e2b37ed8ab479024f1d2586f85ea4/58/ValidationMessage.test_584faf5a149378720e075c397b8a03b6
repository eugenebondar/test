/* istanbul ignore next */'use strict';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_ValidationMessage = require('./../ValidationMessage'); /* istanbul ignore next */var _ValidationMessage2 = _interopRequireDefault(_ValidationMessage);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_enzymeToJson = require('enzyme-to-json'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('ValidationMessage', function () {
    describe('with minimal set of props', function () {
        it('matches snapshot', function () {
            var tree = /* istanbul ignore next */(0, _enzymeToJson.shallowToJson)( /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ValidationMessage2.default, /* istanbul ignore next */{ validationMessage: 'error' })));
            expect(tree).toMatchSnapshot();
        });
    });

    describe('with single error passed as primitive string and custom error class', function () {
        var component = /* istanbul ignore next */void 0;
        beforeEach(function () {
            component = /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ValidationMessage2.default, /* istanbul ignore next */{
                validationMessage: 'Error message',
                className: 'custom-error-class' }));


        });
        it('matches snapshot', function () {
            expect( /* istanbul ignore next */(0, _enzymeToJson.shallowToJson)(component)).toMatchSnapshot();
        });
        it('renders validation message container having custom error class', function () {
            expect(component.find('.custom-error-class').length).toBe(1);
        });
        it('displays error message', function () {
            var errorContainer = component.find('.custom-error-class p');
            expect(errorContainer).toHaveText('Error message');
        });
    });

    describe('with single error in lower case', function () {
        var component = /* istanbul ignore next */void 0;
        beforeEach(function () {
            component = /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ValidationMessage2.default, /* istanbul ignore next */{
                validationMessage: 'error message' }));

        });
        it('displays error message with first character being uppercase', function () {
            expect(component).toHaveText('Error message');
        });
    });

    describe('with single error as an array', function () {
        var component = /* istanbul ignore next */void 0;
        beforeEach(function () {
            component = /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ValidationMessage2.default, /* istanbul ignore next */{
                validationMessage: ['Error message'] }));

        });
        it('matches snapshot', function () {
            expect( /* istanbul ignore next */(0, _enzymeToJson.shallowToJson)(component)).toMatchSnapshot();
        });
        it('displays error message', function () {
            expect(component).toHaveText('Error message');
        });
    });

    describe('with few errors as an array', function () {
        var component = /* istanbul ignore next */void 0;
        beforeEach(function () {
            component = /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ValidationMessage2.default, /* istanbul ignore next */{
                className: 'validation-class',
                validationMessage: ['Error message', 'Another error message'] }));

        });
        it('matches snapshot', function () {
            expect( /* istanbul ignore next */(0, _enzymeToJson.shallowToJson)(component)).toMatchSnapshot();
        });
        it('displays error message', function () {
            expect(component).toHaveText('Error messageAnother error message');
        });
    });
});