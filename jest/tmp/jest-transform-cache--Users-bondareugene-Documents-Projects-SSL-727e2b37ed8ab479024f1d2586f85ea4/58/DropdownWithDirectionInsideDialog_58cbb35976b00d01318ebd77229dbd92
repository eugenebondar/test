/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDom = require('react-dom'); /* istanbul ignore next */var _reactDom2 = _interopRequireDefault(_reactDom);
var /* istanbul ignore next */_classnames = require('classnames'); /* istanbul ignore next */var _classnames2 = _interopRequireDefault(_classnames);

var /* istanbul ignore next */_apocReact = require('apoc-react');

/* istanbul ignore next */require('./DropdownWithDirectionInsideDialog.less'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

DropdownWithDirectionInsideDialog = function (_React$Component) {_inherits(DropdownWithDirectionInsideDialog, _React$Component);
    function /* istanbul ignore next */DropdownWithDirectionInsideDialog(props) {/* istanbul ignore next */_classCallCheck(this, DropdownWithDirectionInsideDialog);var _this = _possibleConstructorReturn(this, (DropdownWithDirectionInsideDialog.__proto__ || Object.getPrototypeOf(DropdownWithDirectionInsideDialog)).call(this,
        props));
        /* istanbul ignore next */_this.state = {
            className: '' }; /* istanbul ignore next */return _this;

    }_createClass(DropdownWithDirectionInsideDialog, [{ key: 'render', value: function render()

        {/* istanbul ignore next */var _this2 = this;
            var className = /* istanbul ignore next */(0, _classnames2.default)(this.props.className, this.state.className);
            var button = this.props.button;
            var clonedButton = /* istanbul ignore next */_react2.default.cloneElement(button, {
                onClick: function /* istanbul ignore next */onClick() {/* istanbul ignore next */var _button$props;
                    /* istanbul ignore next */_this2.checkDirection();
                    button.props.onClick && /* istanbul ignore next */(_button$props = button.props).onClick. /* istanbul ignore next */apply( /* istanbul ignore next */_button$props, /* istanbul ignore next */arguments);
                } });

            var props = /* istanbul ignore next */_extends({}, this.props, { className: className, button: clonedButton });
            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ ref: 'wrapper', className: 'ssl-dropdown-with-direction-inside-dialog' },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_apocReact.Dropdown, props)));


        } }, { key: 'checkDirection', value: function checkDirection()

        {
            var button = /* istanbul ignore next */_reactDom2.default.findDOMNode(this.refs.wrapper).getElementsByTagName('button')[0];
            var dialogBody = /* istanbul ignore next */_reactDom2.default.findDOMNode(this.refs.wrapper).closest('.sc-dialog-body');
            var dropdownMenu = /* istanbul ignore next */_reactDom2.default.findDOMNode(this.refs.wrapper).getElementsByClassName('sc-dropdown-menus')[0];

            var buttonToDialogBodyTop = button.getBoundingClientRect().top - dialogBody.getBoundingClientRect().top;
            var buttonToDialogBodyBottom = dialogBody.getBoundingClientRect().bottom - button.getBoundingClientRect().bottom;

            var openOnTheTop = buttonToDialogBodyTop > buttonToDialogBodyBottom ? 'open-on-top' : '';
            var className = openOnTheTop ? 'open-on-top' : '';
            var maxHeight = Math.max(buttonToDialogBodyTop, buttonToDialogBodyBottom) - 4;

            dropdownMenu.style.maxHeight = /* istanbul ignore next */maxHeight + 'px';
            this.setState({ className: className });
        } }]);return DropdownWithDirectionInsideDialog;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */exports.default = DropdownWithDirectionInsideDialog;


DropdownWithDirectionInsideDialog.propTypes = /* istanbul ignore next */_extends({},
/* istanbul ignore next */_apocReact.Dropdown.propTypes);