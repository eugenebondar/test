/* istanbul ignore next */'use strict';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_enzymeToJson = require('enzyme-to-json');
var /* istanbul ignore next */_index = require('./index'); /* istanbul ignore next */var _index2 = _interopRequireDefault(_index);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Input', function () {
    jest.useFakeTimers();

    it('matches snapshot', function () {
        var component = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */null));
        expect( /* istanbul ignore next */(0, _enzymeToJson.mountToJson)(component)).toMatchSnapshot();
    });

    it('validates phone number length', function () {
        var updateSpy = jasmine.createSpy('updateSpy');
        var component = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */{ id: 'id', validationType: 'phone', updateValue: updateSpy, value: value }));

        var value = '1'.repeat(50);
        component.find('input').simulate('change', { target: { value: value } });
        jest.runAllTimers();
        expect(updateSpy).toHaveBeenCalledWith('id', '1'.repeat(30));

        value = '1'.repeat(10);
        component.find('input').simulate('change', { target: { value: value } });
        jest.runAllTimers();
        expect(updateSpy).toHaveBeenCalledWith('id', value);
    });

    describe('when phone number is inserted', function () {
        var component = /* istanbul ignore next */void 0,updateSpy = /* istanbul ignore next */void 0;
        beforeAll(function () {
            updateSpy = jasmine.createSpy('updateSpy');
            component = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */{ id: 'id', validationType: 'phone', updateValue: updateSpy, value: '' }));
        });

        it('validates phone number chars', function () {
            var invalidValue = 'abcDEF1234567890#() -+!@$%^&*_=[]{};\'\\:"|,./<>?';
            var expectedValidValue = 'abcDEF1234567890#() -+';

            component.find('input').simulate('change', { target: { value: invalidValue } });
            jest.runAllTimers();
            expect(updateSpy).toHaveBeenCalledWith('id', expectedValidValue);
        });

        it('calls removeIncorrectCharactersForPhoneNumber method', function () {
            spyOn(component.instance(), 'removeIncorrectCharactersForPhoneNumber');
            component.find('input').simulate('change', { target: { value: 'some value' } });
            expect(component.instance().removeIncorrectCharactersForPhoneNumber).toHaveBeenCalledWith('some value');
        });
    });

    describe('removeIncorrectCharactersForPhoneNumber method', function () {
        describe('when incorrect is entered', function () {
            it('it does not return it', function () {
                var component = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */null));
                '!@$%^&*_=[]{};\'\\:"|,./<>?'.split('').forEach(function (char) {
                    var result = component.instance().removeIncorrectCharactersForPhoneNumber(char);
                    expect(result).toEqual('');
                });
            });
        });

        describe('when correct character is retunred', function () {
            it('it returns it', function () {
                var component = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */null));
                'abcDEF1234567890#() -+'.split('').forEach(function (char) {
                    var result = component.instance().removeIncorrectCharactersForPhoneNumber(char);
                    expect(result).toEqual(char);
                });
            });
        });
    });

    it('executes onBlur callback', function () {
        var spy = jasmine.createSpy('spy');
        var component = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */{ id: 'id', onBlur: spy, value: 'test' }));
        component.find('input').simulate('blur');
        expect(spy).toHaveBeenCalledTimes(1);
        expect(spy).toHaveBeenCalledWith('test', 'id');
    });

    describe('when prop value is 0 (number)', function () {
        var wrapper = /* istanbul ignore next */void 0;
        beforeAll(function () /* istanbul ignore next */{return wrapper = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */{ value: 0 }));});
        it('renders internal input value with 0 (number)', function () {
            expect(wrapper.find('input').prop('value')).toEqual(0);
        });
    });

    describe('when props value is null', function () {
        var wrapper = /* istanbul ignore next */void 0;
        beforeAll(function () /* istanbul ignore next */{return wrapper = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */{ value: null }));});
        it('renders internal input with empty string', function () {
            expect(wrapper.find('input').prop('value')).toEqual('');
        });
    });

    describe('when props value is undefined', function () {
        var wrapper = /* istanbul ignore next */void 0;
        beforeAll(function () /* istanbul ignore next */{return wrapper = /* istanbul ignore next */(0, _enzyme.mount)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */{ value: null }));});
        it('renders internal input with empty string', function () {
            expect(wrapper.find('input').prop('value')).toEqual('');
        });
    });
});