/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();exports.default =











createListOfElementsWithSearch;var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);var /* istanbul ignore next */_counterpart = require('counterpart'); /* istanbul ignore next */var _counterpart2 = _interopRequireDefault(_counterpart);var /* istanbul ignore next */_classnames = require('classnames'); /* istanbul ignore next */var _classnames2 = _interopRequireDefault(_classnames);var /* istanbul ignore next */_SearchInput = require('../SearchInput/SearchInput'); /* istanbul ignore next */var _SearchInput2 = _interopRequireDefault(_SearchInput);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;} /**
param {React.Component|undefined} [ListWrapperComponent] - component in which list should be wrapped
param {function} [shouldItemBeVisibleCallback] - callback to check should item be hidden
returns {React.Component}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         * @constructor
function createListOfElementsWithSearch( /* istanbul ignore next */_ref) {/* istanbul ignore next */var ListWrapperComponent = _ref.ListWrapperComponent,shouldItemBeVisibleCallback = _ref.shouldItemBeVisibleCallback,className = _ref.className; /* istanbul ignore next */var ElementsListWithSearch = function (_React$Component) {_inherits(ElementsListWithSearch, _React$Component);function /* istanbul ignore next */ElementsListWithSearch(props) {/* istanbul ignore next */_classCallCheck(this, ElementsListWithSearch);var _this = _possibleConstructorReturn(this, (ElementsListWithSearch.__proto__ || Object.getPrototypeOf(ElementsListWithSearch)).call(this, props)); /* istanbul ignore next */_this.state = { searchValue: '' }; /* istanbul ignore next */return _this;

        }_createClass(ElementsListWithSearch, [{ key: 'render', value: function render()

            {/* istanbul ignore next */var _this2 = this;
                var listItems = /* istanbul ignore next */_react2.default.Children.map(this.props.children, function (child) {
                    var checkboxClassName = /* istanbul ignore next */(0, _classnames2.default)({
                        'hide': !shouldItemBeVisibleCallback(child.props, /* istanbul ignore next */_this2.state.searchValue) });

                    return (
                        /* istanbul ignore next */_react2.default.cloneElement(child, {
                            className: checkboxClassName }));


                });

                return (
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: /* istanbul ignore next */(0, _classnames2.default)('elements-list-with-search', className) },
                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_SearchInput2.default, /* istanbul ignore next */{
                            onKeyUp: function /* istanbul ignore next */onKeyUp(e) /* istanbul ignore next */{return (/* istanbul ignore next */_this2.onSearchInputChange(e.target.value));},
                            placeholder: /* istanbul ignore next */(0, _counterpart2.default)('general.searchByName') }),

                        ListWrapperComponent && /* istanbul ignore next */_react2.default.createElement(ListWrapperComponent, /* istanbul ignore next */_extends({},
                        this.props, {
                            children: listItems })),

                        !ListWrapperComponent && listItems));


            } }, { key: 'onSearchInputChange', value: function onSearchInputChange(

            value) {
                this.setState({ searchValue: value });
            } }]);return ElementsListWithSearch;}( /* istanbul ignore next */_react2.default.Component);


    ElementsListWithSearch.propTypes = /* istanbul ignore next */_extends({},
    ListWrapperComponent ? ListWrapperComponent.propTypes : {}, {
        children: /* istanbul ignore next */_react2.default.PropTypes.node });


    return ElementsListWithSearch;
}