/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_reactDatetime = require('react-datetime'); /* istanbul ignore next */var _reactDatetime2 = _interopRequireDefault(_reactDatetime);
var /* istanbul ignore next */_DateFormats = require('../../Utils/DateFormats'); /* istanbul ignore next */var _DateFormats2 = _interopRequireDefault(_DateFormats);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

DateTimePeriodPicker = function (_React$PureComponent) {_inherits(DateTimePeriodPicker, _React$PureComponent);
    function /* istanbul ignore next */DateTimePeriodPicker(props) {/* istanbul ignore next */_classCallCheck(this, DateTimePeriodPicker);var _this = _possibleConstructorReturn(this, (DateTimePeriodPicker.__proto__ || Object.getPrototypeOf(DateTimePeriodPicker)).call(this,
        props));
        /* istanbul ignore next */_this.state = { value: props.value };

        /* istanbul ignore next */_this.onChange = /* istanbul ignore next */ /* istanbul ignore next */_this.onChange.bind(_this); /* istanbul ignore next */return _this;
    }_createClass(DateTimePeriodPicker, [{ key: 'componentWillReceiveProps', value: function componentWillReceiveProps(

        nextProps) {
            this.setState({ value: nextProps.value });
        } }, { key: 'render', value: function render()

        {/* istanbul ignore next */var _this2 = this;
            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_reactDatetime2.default, /* istanbul ignore next */{
                    className: 'dt__wrap date-rime-period-picker',
                    closeOnSelect: /* istanbul ignore next */true,
                    value: this.state.value,
                    inputProps: {
                        readOnly: true,
                        value: this.props.value.format( /* istanbul ignore next */_DateFormats2.default.fullDate) },

                    onChange: this.onChange,
                    isValidDate: function /* istanbul ignore next */isValidDate(currentDate) /* istanbul ignore next */{return (/* istanbul ignore next */_this2.props.onValidationCheck(currentDate));} }));


        }

        /**
           * @param {Moment} date
           */ }, { key: 'onChange', value: function onChange(
        date) {
            if (this.props.onValidationCheck(date)) {
                this.props.onChange(date);
            } else {
                this.forceUpdate();
            }
        } }]);return DateTimePeriodPicker;}( /* istanbul ignore next */_react2.default.PureComponent); /* istanbul ignore next */exports.default = DateTimePeriodPicker;


DateTimePeriodPicker.propTypes = {
    value: /* istanbul ignore next */_react2.default.PropTypes.object,
    onChange: /* istanbul ignore next */_react2.default.PropTypes.func,
    onValidationCheck: /* istanbul ignore next */_react2.default.PropTypes.func };