/* istanbul ignore next */'use strict';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_FindingDetailsField = require('../Components/FindingDetails/FindingDetailsField'); /* istanbul ignore next */var _FindingDetailsField2 = _interopRequireDefault(_FindingDetailsField);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_enzymeToJson = require('enzyme-to-json'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


describe('FindingDetailsField', function () {
    describe('with minimal set of props', function () {
        it('matches snapshot', function () {
            var tree = /* istanbul ignore next */(0, _enzymeToJson.shallowToJson)( /* istanbul ignore next */(0, _enzyme.shallow)(
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FindingDetailsField2.default, /* istanbul ignore next */{ value: 'value', translationKey: 'findings.category' })));

            expect(tree).toMatchSnapshot();
        });
    });

    describe('correctly set `className`', function () {
        var component = /* istanbul ignore next */void 0;
        beforeEach(function () {
            component = /* istanbul ignore next */(0, _enzyme.mount)(
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FindingDetailsField2.default, /* istanbul ignore next */{ value: 'value', translationKey: 'findings.category' }));

        });
        it('matches snapshot', function () {
            expect( /* istanbul ignore next */(0, _enzymeToJson.shallowToJson)( /* istanbul ignore next */(0, _enzyme.shallow)( /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FindingDetailsField2.default, /* istanbul ignore next */{ value: 'value', translationKey: 'findings.category' })))).toMatchSnapshot();
        });
        it('without passing `className`', function () {
            var element = component.find('.finding-details-field');
            expect(element.length).toBe(1);
            expect(element).toHaveProp('className', 'finding-details-field');
        });
        it('with passing `className`', function () {
            var element = component.find('.finding-details-field');
            expect(element.length).toBe(1);
            component.setProps({ className: 'some-extra-class' });
            expect(element).toHaveClassName('finding-details-field');
            expect(element).toHaveClassName('some-extra-class');
        });
    });

});