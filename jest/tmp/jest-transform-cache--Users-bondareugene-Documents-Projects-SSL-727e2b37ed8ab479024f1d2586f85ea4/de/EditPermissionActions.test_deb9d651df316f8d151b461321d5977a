/* istanbul ignore next */'use strict'; /* istanbul ignore next */require('./Mocks');

describe('EditPermissionActions', function () {
    jest.useFakeTimers();
    jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;

    var editPermissionActions = require('./../EditPermissionActions').default;
    var permissionApi = /* istanbul ignore next */require('../../../Models/Permisssion/api');
    var testApi = /* istanbul ignore next */require('../../../Models/Tests/api');
    var usersApi = /* istanbul ignore next */require('../../../Models/Users/api');
    var groupsApi = /* istanbul ignore next */require('../../../Models/Groups/api');

    describe('save action', function () {
        var resourceId = 'some-unique-id';
        var resourceType = 'resource_type_example';
        var permissions = [];
        var isCurrentUserStaff = true;

        var putByResourceTypeAndIdResponse = 'putByResourceTypeAndIdResponse';

        var executeSave = function executeSave( /* istanbul ignore next */_ref) {/* istanbul ignore next */var resourceId = _ref.resourceId,resourceType = _ref.resourceType,permissions = _ref.permissions;
            editPermissionActions.save({ resourceId: resourceId, resourceType: resourceType, permissions: permissions, isCurrentUserStaff: isCurrentUserStaff });
            editPermissionActions.save.completed = jest.fn(function () {
            });
            editPermissionActions.save.failed = jest.fn(function () {
            });
        };

        describe('when ends with success', function () {
            beforeEach(function () {
                permissionApi.putByResourceTypeAndId = jest.fn(function () /* istanbul ignore next */{return Promise.resolve(putByResourceTypeAndIdResponse);});
                executeSave({ resourceId: resourceId, resourceType: resourceType, permissions: permissions, isCurrentUserStaff: isCurrentUserStaff });
            });

            it('fetches data from api.putByResouceTypeAndId', function () {
                jest.runAllTimers();
                expect(permissionApi.putByResourceTypeAndId.mock.calls.length).toBe(1);
                expect(permissionApi.putByResourceTypeAndId.mock.calls[0]).toEqual([resourceType, resourceId, permissions, isCurrentUserStaff]);
            });

            it('successful fetch executes `completed` sub action', function () {
                return new Promise(function (resolve) {
                    editPermissionActions.save.completed = function (result) {
                        expect(result).toEqual(putByResourceTypeAndIdResponse); //it's exact response of permissionApi.putByResourceTypeAndId method
                        resolve();
                    };
                    jest.runAllTimers();
                });
            });

            it('not successful fetch executes `failed` sub action', function () {
                permissionApi.putByResourceTypeAndId = jest.fn(function () /* istanbul ignore next */{return Promise.reject();});

                return new Promise(function (resolve) {
                    editPermissionActions.save.failed = function () /* istanbul ignore next */{return resolve();};
                    jest.runAllTimers();
                });
            });
        });
    });

    describe('openDialog executed with example data', function () {
        var resourceId = 'some-unique-id';
        var resourceType = 'resource_type_example';

        describe('and with `isCurrentUserStaff = true`', function () {
            var isCurrentUserStaff = true;

            beforeEach(function () {
                editPermissionActions.openDialog({ resourceId: resourceId, resourceType: resourceType, isCurrentUserStaff: isCurrentUserStaff });
                permissionApi.fetchByResourceTypeAndId = jest.fn(function () /* istanbul ignore next */{return Promise.resolve([]);});
                groupsApi.fetchGroups.mockClear();
            });

            it('fetches data from API', function () {
                jest.runAllTimers();
                expect(permissionApi.fetchByResourceTypeAndId.mock.calls.length).toBe(1);
                expect(permissionApi.fetchByResourceTypeAndId.mock.calls[0]).toEqual([resourceType, resourceId, isCurrentUserStaff]);

                expect(testApi.fetchTestDetails.mock.calls.length).toBe(1);
                expect(testApi.fetchTestDetails.mock.calls[0]).toEqual([resourceId, isCurrentUserStaff]);

                expect(groupsApi.fetchGroups.mock.calls.length).toBe(1);
                expect(groupsApi.fetchGroups.mock.calls[0]).toEqual([isCurrentUserStaff]);

                expect(usersApi.fetchUsers.mock.calls.length).toBe(1);
                expect(usersApi.fetchUsers.mock.calls[0][0]).toEqual({
                    filter: {
                        user_type: 'staff' } });


            });

            it('successful fetch executes `completed` sub action', function () {
                return new Promise(function (resolve) {
                    editPermissionActions.openDialog.completed = function (result) {
                        expect(result).toBeTruthy();
                        expect(result.permissions).toBeInstanceOf(Array);
                        expect(result.permittees).toBeInstanceOf(Array);
                        resolve();
                    };

                    jest.runAllTimers();
                });
            });

            it('not successful fetch executes `failed` sub action', function () {
                permissionApi.fetchByResourceTypeAndId = jest.fn(function () /* istanbul ignore next */{return Promise.reject();});
                return new Promise(function (resolve) {
                    editPermissionActions.openDialog.failed = function () /* istanbul ignore next */{return resolve();};
                    jest.runAllTimers();
                });
            });
        });

        describe('having `isCurrentUserStaff = false`', function () {
            var isCurrentUserStaff = false;

            beforeAll(function () {
                usersApi.fetchUsers.mockClear();
                groupsApi.fetchGroups.mockClear();
                editPermissionActions.openDialog({ resourceId: resourceId, resourceType: resourceType, isCurrentUserStaff: isCurrentUserStaff });
                permissionApi.fetchByResourceTypeAndId = jest.fn(function () /* istanbul ignore next */{return Promise.resolve();});
                jest.runAllTimers();
            });

            it('does not fetch data from  usersApi.fetchUsers', function () {
                expect(usersApi.fetchUsers.mock.calls.length).toBe(0);
            });
        });
    });
});