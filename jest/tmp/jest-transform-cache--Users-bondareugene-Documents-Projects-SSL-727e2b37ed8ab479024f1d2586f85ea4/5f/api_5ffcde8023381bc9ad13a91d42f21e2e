/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_Api = require('../../Utils/Api'); /* istanbul ignore next */var _Api2 = _interopRequireDefault(_Api);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var catalogAPI = {
    service: {
        baseUrl: '/api/service' } };



/**
                                      * @Param {Object} filter
                                      * @return {Promise.<[]>}
                                     */

catalogAPI.service.fetchCatalogs = function () {/* istanbul ignore next */var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return (/* istanbul ignore next */_Api2.default.get(this.baseUrl + '/catalogs', { filter: filter }));
};

catalogAPI.service.fetchCatalog = function (id) {
    return (/* istanbul ignore next */_Api2.default.get(this.baseUrl + /* istanbul ignore next */('/catalogs/' + id + '.json')));
};

catalogAPI.service.createCatalog = function (data) {
    return (/* istanbul ignore next */_Api2.default.post(this.baseUrl + '/catalogs', data).
        then(function (response) /* istanbul ignore next */{return response.json();}));
};

catalogAPI.service.editCatalog = function (id, data) {
    return (/* istanbul ignore next */_Api2.default.put(this.baseUrl + /* istanbul ignore next */('/catalogs/' + id + '.json'), data).
        then(function (response) /* istanbul ignore next */{return response.json();}));
};

catalogAPI.service.deleteCatalog = function (id) {
    return (/* istanbul ignore next */_Api2.default.delete(this.baseUrl + /* istanbul ignore next */('/catalogs/' + id + '.json'), {}));
}; /* istanbul ignore next */exports.default =

catalogAPI;