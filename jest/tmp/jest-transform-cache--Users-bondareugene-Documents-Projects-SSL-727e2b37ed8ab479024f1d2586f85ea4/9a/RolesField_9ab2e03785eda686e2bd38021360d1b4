/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_apocReact = require('apoc-react');

var /* istanbul ignore next */_index = require('../../../../Shared/Elements/Radio/index'); /* istanbul ignore next */var _index2 = _interopRequireDefault(_index);
var /* istanbul ignore next */_FormField = require('../../../../Shared/Elements/Form/FormField'); /* istanbul ignore next */var _FormField2 = _interopRequireDefault(_FormField);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

RolesField = function (_React$Component) {_inherits(RolesField, _React$Component);
    function /* istanbul ignore next */RolesField(props) {/* istanbul ignore next */_classCallCheck(this, RolesField);var _this = _possibleConstructorReturn(this, (RolesField.__proto__ || Object.getPrototypeOf(RolesField)).call(this,
        props));

        /* istanbul ignore next */_this.state = {
            showRoles: !! /* istanbul ignore next */_this.props.fields.role_id };


        /* istanbul ignore next */_this.updateToggle = /* istanbul ignore next */_this.updateToggle.bind( /* istanbul ignore next */_this); /* istanbul ignore next */return _this;
    }_createClass(RolesField, [{ key: 'componentWillReceiveProps', value: function componentWillReceiveProps(
        nextProps) {
            if (this.state.showRoles && !nextProps.fields.role_id) {
                this.state = {
                    showRoles: false };

            }
        } }, { key: 'getVisibleRoles', value: function getVisibleRoles()

        {
            var rolesByGroupType = this.props.roles[this.props.fields.group_type];
            var organizationId = this.props.fields.organization_id;
            if (organizationId) {
                return rolesByGroupType.filter(function (role) /* istanbul ignore next */{return !role.organizationId || role.organizationId === organizationId;});
            }

            return rolesByGroupType;
        } }, { key: 'render', value: function render()

        {/* istanbul ignore next */var _props =
            this.props,fields = _props.fields,updateValue = _props.updateValue,getTranslate = _props.getTranslate,getValidationMessage = _props.getValidationMessage,isFieldValid = _props.isFieldValid; /* istanbul ignore next */var
            showRoles = this.state.showRoles;
            var rolesSection = showRoles &&
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FormField2.default, /* istanbul ignore next */{
                    label: getTranslate('role'),
                    isRequired: false,
                    isValid: isFieldValid('role_id'),
                    validationMessage: getValidationMessage('role_id') },

                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'role-list-wrap' },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_index2.default, /* istanbul ignore next */{
                        id: 'role_id',
                        updateValue: updateValue,
                        value: fields.role_id,
                        radio: this.getVisibleRoles() })));




            var noRoleAssignedMessage = !showRoles &&
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'form-indent' }, getTranslate('noRoleAssigned'));

            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */null,
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_FormField2.default, /* istanbul ignore next */{
                            label: getTranslate('assignRole'),
                            isRequired: false,
                            isValid: isFieldValid('role_id'),
                            validationMessage: getValidationMessage('role_id') },

                        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_apocReact.ToggleButton, /* istanbul ignore next */{
                            toggleSize: 'sm',
                            isOn: showRoles,
                            onSwitch: this.updateToggle }),

                        noRoleAssignedMessage),

                    rolesSection));


        } }, { key: 'updateToggle', value: function updateToggle()
        {/* istanbul ignore next */var
            showRoles = this.state.showRoles;
            if (showRoles) {
                this.props.updateValue('role_id', null);
            }
            this.setState({ showRoles: !showRoles });
        } }]);return RolesField;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */exports.default = RolesField;


RolesField.propTypes = {
    fields: /* istanbul ignore next */_react2.default.PropTypes.object.isRequired,
    updateValue: /* istanbul ignore next */_react2.default.PropTypes.func,
    getTranslate: /* istanbul ignore next */_react2.default.PropTypes.func,
    isFieldValid: /* istanbul ignore next */_react2.default.PropTypes.func,
    getValidationMessage: /* istanbul ignore next */_react2.default.PropTypes.func,
    roles: /* istanbul ignore next */_react2.default.PropTypes.object };