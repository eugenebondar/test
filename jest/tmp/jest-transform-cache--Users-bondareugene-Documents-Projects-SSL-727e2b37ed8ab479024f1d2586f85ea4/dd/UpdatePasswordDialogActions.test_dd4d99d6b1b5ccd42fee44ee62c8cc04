/* istanbul ignore next */'use strict'; /* istanbul ignore next */require('./Mocks');

describe('UpdatePasswordDialogActions', function () {
    jest.useFakeTimers();
    jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;

    var updatePasswordDialogActions = require('./../UpdatePasswordDialogActions').default;
    var sessionApi = /* istanbul ignore next */require('../../../../../Models/Session/api');

    describe('onSubmit action', function () {
        beforeEach(function () {
            sessionApi.updatePassword = jest.fn(function () /* istanbul ignore next */{return Promise.resolve(getUpdatePasswordResult);});
            executeUpdatePassword(fields);
        });
        var fields = {
            email: 'email@gmail.com',
            current_password: '',
            password: '',
            password_confirmation: '' };


        var executeUpdatePassword = function executeUpdatePassword(fields) {
            updatePasswordDialogActions.submit(fields);
            updatePasswordDialogActions.submit.completed = jest.fn(function () {
            });
            updatePasswordDialogActions.submit.failed = jest.fn(function () {
            });
        };

        var getUpdatePasswordResult = 'getUpdatePasswordResult';
        var getUpdatePasswordResultWithError = { errors: [] };

        it('fetches data from sessionApi.updatePassword', function () {
            jest.runAllTimers();
            expect(sessionApi.updatePassword.mock.calls.length).toBe(1);
        });

        it('successful fetch executes `completed` sub action', function () {
            return new Promise(function (resolve) {
                updatePasswordDialogActions.submit.completed = function (result) {
                    expect(result).toEqual(getUpdatePasswordResult);
                    resolve();
                };
                jest.runAllTimers();
            });
        });

        it('successful fetch executes `failed` sub action with validatin error', function () {
            sessionApi.updatePassword = jest.fn(function () /* istanbul ignore next */{return Promise.resolve(getUpdatePasswordResultWithError);});

            return new Promise(function (resolve) {
                updatePasswordDialogActions.submit.failed = function (result) {
                    expect(result).toEqual(getUpdatePasswordResultWithError);
                    resolve();
                };
                jest.runAllTimers();
            });
        });
    });
});