/* istanbul ignore next */'use strict';var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_enzyme = require('enzyme');
var /* istanbul ignore next */_enzymeToJson = require('enzyme-to-json'); /* istanbul ignore next */var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);
var /* istanbul ignore next */_MultiselectWithSearch = require('../MultiselectWithSearch'); /* istanbul ignore next */var _MultiselectWithSearch2 = _interopRequireDefault(_MultiselectWithSearch);
var /* istanbul ignore next */_apocReact = require('apoc-react'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var itemList = ['a', 'b'];

/**
                            * @return {ReactWrapper<P, S>}
                            */
var getMultiselectWithSearch = function getMultiselectWithSearch() {
    return (/* istanbul ignore next */(0, _enzyme.mount)(
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_MultiselectWithSearch2.default, /* istanbul ignore next */{ onChange: function /* istanbul ignore next */onChange() {} },
            itemList.map(function (item, i) {
                return (
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_apocReact.Checkbox, /* istanbul ignore next */{
                        key: i,
                        label: item,
                        name: item }));


            }))));


};

describe('<MultiselectWithSearch />', function () {
    it('should match snapshot', function () {
        var tree = /* istanbul ignore next */(0, _enzymeToJson2.default)(getMultiselectWithSearch());
        expect(tree).toMatchSnapshot();
    });

    it('should be rendered', function () {
        var component = getMultiselectWithSearch();
        expect(component).toBeTruthy();
    });

    describe('check result if SearchInput has', function () {
        it('empty value', function () {
            var ElementsListWithSearch = getMultiselectWithSearch();
            ElementsListWithSearch.setState({ searchValue: '' });
            expect(ElementsListWithSearch.find('.hide').length).toBe(0);
        });

        it('value which equal to one of checkbox\'s name', function () {
            var ElementsListWithSearch = getMultiselectWithSearch();
            ElementsListWithSearch.setState({ searchValue: '' });
            expect(ElementsListWithSearch.find('.hide').length).toBe(0);

            ElementsListWithSearch.setState({ searchValue: 'a' });
            expect(ElementsListWithSearch.find('.hide').length).toBe(1);
        });

        it('value which doesn\'t equal to any of checkbox\'s name', function () {
            var ElementsListWithSearch = getMultiselectWithSearch();
            ElementsListWithSearch.setState({ searchValue: '' });
            expect(ElementsListWithSearch.find('.hide').length).toBe(0);

            ElementsListWithSearch.setState({ searchValue: 'another name' });
            expect(ElementsListWithSearch.find('.hide').length).toBe(2);
        });
    });
});