/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.default = undefined;var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_moment = require('moment'); /* istanbul ignore next */var _moment2 = _interopRequireDefault(_moment);

var /* istanbul ignore next */_DateTimePeriodRangeController = require('./DateTimePeriodRangeController'); /* istanbul ignore next */var _DateTimePeriodRangeController2 = _interopRequireDefault(_DateTimePeriodRangeController);
var /* istanbul ignore next */_DateTimePeriodPicker = require('./DateTimePeriodPicker'); /* istanbul ignore next */var _DateTimePeriodPicker2 = _interopRequireDefault(_DateTimePeriodPicker);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function DateTimePeriodContainer( /* istanbul ignore next */_ref) {/* istanbul ignore next */var start = _ref.start,end = _ref.end,maxEnd = _ref.maxEnd,minStart = _ref.minStart,_onChange = _ref.onChange;
    return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'date-time-period-container' },
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DateTimePeriodPicker2.default, /* istanbul ignore next */{
                value: start,
                onChange: function /* istanbul ignore next */onChange(date) /* istanbul ignore next */{return _onChange({ start: date, end: end });},
                onValidationCheck: function /* istanbul ignore next */onValidationCheck(currentDate) {
                    return currentDate.isAfter(minStart) && currentDate.isBefore(maxEnd);
                } }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DateTimePeriodRangeController2.default, /* istanbul ignore next */{
                start: start,
                minStart: minStart,
                maxEnd: maxEnd,
                end: end,
                onChange: function /* istanbul ignore next */onChange( /* istanbul ignore next */_ref2) /* istanbul ignore next */{var start = _ref2.start,end = _ref2.end;return _onChange({ start: start, end: end });} }),

            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_DateTimePeriodPicker2.default, /* istanbul ignore next */{
                value: end,
                onChange: function /* istanbul ignore next */onChange(date) /* istanbul ignore next */{return _onChange({ end: date, start: start });},
                onValidationCheck: function /* istanbul ignore next */onValidationCheck(currentDate) {
                    return currentDate.isAfter(minStart) && currentDate.isBefore(maxEnd);
                } })));



} /* istanbul ignore next */exports.default = DateTimePeriodContainer;

DateTimePeriodContainer.propTypes = {
    start: /* istanbul ignore next */_react2.default.PropTypes.instanceOf( /* istanbul ignore next */_moment2.default),
    end: /* istanbul ignore next */_react2.default.PropTypes.instanceOf( /* istanbul ignore next */_moment2.default),
    maxEnd: /* istanbul ignore next */_react2.default.PropTypes.instanceOf( /* istanbul ignore next */_moment2.default),
    minStart: /* istanbul ignore next */_react2.default.PropTypes.instanceOf( /* istanbul ignore next */_moment2.default),
    /**
                                                                                                                            * @type {DateTimePeriodContainerOnChange}
                                                                                                                            */
    onChange: /* istanbul ignore next */_react2.default.PropTypes.func };


/**
                                                                           * @callback DateTimePeriodContainerOnChange
                                                                           * @param {{start:Moment, end: Moment}
                                                                           */