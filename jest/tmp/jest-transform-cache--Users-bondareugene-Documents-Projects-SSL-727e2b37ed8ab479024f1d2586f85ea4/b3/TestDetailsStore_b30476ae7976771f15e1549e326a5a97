/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_detectBrowser = require('detect-browser'); /* istanbul ignore next */var _detectBrowser2 = _interopRequireDefault(_detectBrowser);

var /* istanbul ignore next */_Actions = require('../Actions');
var /* istanbul ignore next */_ScheduleDialogActions = require('../Shared/ScheduleDialog/ScheduleDialogActions'); /* istanbul ignore next */var _ScheduleDialogActions2 = _interopRequireDefault(_ScheduleDialogActions);

var /* istanbul ignore next */_api = require('../Models/Tests/api'); /* istanbul ignore next */var _api2 = _interopRequireDefault(_api);
var /* istanbul ignore next */_api3 = require('../Models/Findings/api'); /* istanbul ignore next */var _api4 = _interopRequireDefault(_api3);
var /* istanbul ignore next */_FindingModel = require('../Models/Findings/FindingModel'); /* istanbul ignore next */var _FindingModel2 = _interopRequireDefault(_FindingModel);

var /* istanbul ignore next */_SessionUserStore = require('./SessionUser/SessionUserStore'); /* istanbul ignore next */var _SessionUserStore2 = _interopRequireDefault(_SessionUserStore);
var /* istanbul ignore next */_BaseStore2 = require('./BaseStore'); /* istanbul ignore next */var _BaseStore3 = _interopRequireDefault(_BaseStore2);

var /* istanbul ignore next */_processBlobResponse = require('../Utils/processBlobResponse'); /* istanbul ignore next */var _processBlobResponse2 = _interopRequireDefault(_processBlobResponse);
var /* istanbul ignore next */_getUserType = require('../Utils/getUserType'); /* istanbul ignore next */var _getUserType2 = _interopRequireDefault(_getUserType);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

/**
classdesc Class representing a Test Details Store.
class
var

TestDetailsStore = function (_BaseStore) {_inherits(TestDetailsStore, _BaseStore);
    function /* istanbul ignore next */TestDetailsStore() {/* istanbul ignore next */_classCallCheck(this, TestDetailsStore);var _this = _possibleConstructorReturn(this, (TestDetailsStore.__proto__ || Object.getPrototypeOf(TestDetailsStore)).call(this,
        [/* istanbul ignore next */_Actions.TestDetailsActions]));

        /* istanbul ignore next */_this.findingsList = null;
        /* istanbul ignore next */_this.findingTypes = null;

        /* istanbul ignore next */_this.isService = null;
        /* istanbul ignore next */_this.userType = null;
        /* istanbul ignore next */_this.listenTo( /* istanbul ignore next */_SessionUserStore2.default, /* istanbul ignore next */_this.output);
        /* istanbul ignore next */_this.listenTo( /* istanbul ignore next */_ScheduleDialogActions2.default.submit.completed, /* istanbul ignore next */ /* istanbul ignore next */_this.onScheduleSubmitCompleted.bind(_this)); /* istanbul ignore next */return _this;
    }

    /**
       * Listener for SessionStore Store.
       * Set isService according with SessionStore's currentUser.
       * @param {event} [event]
       * @param {data} [data]
       * @config {Bool} set isService.
       */_createClass(TestDetailsStore, [{ key: 'output', value: function output()
        {/* istanbul ignore next */var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { event: '', data: null }; /* istanbul ignore next */var
            event = e.event,data = e.data;
            switch (event) {
                case 'currentUser':
                    this.isService = data.isService;
                    this.userType = /* istanbul ignore next */(0, _getUserType2.default)(data.isService);
                    break;}

        } }, { key: 'fetchTestDetails', value: function fetchTestDetails(

        id) {/* istanbul ignore next */var _this2 = this;var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            if (this.isService === null) {
                return;
            }
            (this.isService ? /* istanbul ignore next */_api2.default.service : /* istanbul ignore next */_api2.default.customer).fetchFullTestDetails(id, filter).
            then(function (response) {
                if (response.status === 404) {
                    /* istanbul ignore next */_this2.trigger({ event: 'testIsUnavailable' });
                } else {
                    response.json().then(function (json) /* istanbul ignore next */{return (/* istanbul ignore next */_this2.trigger({ event: 'siteTestDetailsInfo', data: json }));});
                }
            });
        }

        /**
           * Update test status.
           * @param {String} [id] - test's id.
           * @param {String} [data] - new status.
           * @param {Boolean} [isCompletedNeedForUpdate] - new status.
           * @trigger {Bool} [testStatusUpdated] - response status.
           */ }, { key: 'updateStatus', value: function updateStatus(
        id, data, isCompletedNeedForUpdate) {/* istanbul ignore next */var _this3 = this;
            /* istanbul ignore next */_api2.default.updateStatus(id, data).
            then(function (response) {
                var arrayToUpdate = ['Active'];
                isCompletedNeedForUpdate ? arrayToUpdate.push('Completed') : null;
                /* istanbul ignore next */_this3.trigger({
                    event: 'testStatusUpdated',
                    data: { status: response.ok, update: arrayToUpdate } });

            });
        } }, { key: 'onScheduleSubmitCompleted', value: function onScheduleSubmitCompleted(_ref)

        {/* istanbul ignore next */var testId = _ref.testId;
            this.trigger({ event: 'updateSiteTestDetailsInfo', data: { id: testId } });
            this.trigger({ event: 'testRunSchedulerUpdated', data: true });
        } }, { key: 'updateTestInfo', value: function updateTestInfo(

        data, id) {/* istanbul ignore next */var _this4 = this;
            /* istanbul ignore next */_api2.default.updateTestInfo(data, id, this.isService).
            then(function (response) {
                /* istanbul ignore next */_this4.checkValidation(response, 'contactsValidation');
                /* istanbul ignore next */_this4.trigger({ event: 'testRunInfoUpdated', data: response.ok });
            });
        } }, { key: 'requestTest', value: function requestTest(

        id, testType) {/* istanbul ignore next */var _this5 = this;
            /* istanbul ignore next */_api2.default.requestTest(id).then(function (response) {
                /* istanbul ignore next */_this5.trigger({
                    event: 'testStatusUpdated',
                    data: { status: response.ok, update: testType } });

            });
        } }, { key: 'respondTest', value: function respondTest(

        id, testType) {/* istanbul ignore next */var _this6 = this;
            /* istanbul ignore next */_api2.default.respondTest(id).then(function (response) {
                /* istanbul ignore next */_this6.trigger({
                    event: 'testStatusUpdated',
                    data: { status: response.ok, update: testType } });

            });
        } }, { key: 'stopTest', value: function stopTest(

        id) {/* istanbul ignore next */var _this7 = this;
            /* istanbul ignore next */_api2.default.stopTest(id).then(function (response) {
                /* istanbul ignore next */_this7.trigger({ event: 'testStopped', data: response.ok });
            });
        } }, { key: 'abortTest', value: function abortTest(

        id) {/* istanbul ignore next */var _this8 = this;
            /* istanbul ignore next */_api2.default.abortTest(id).then(function (response) {
                /* istanbul ignore next */_this8.trigger({ event: 'testStopped', data: response.ok });
            });
        }

        // Findings
    }, { key: 'getFindings', value: function getFindings(id, filter) {/* istanbul ignore next */var _this9 = this;
            /* istanbul ignore next */_api4.default[this.userType].getFindings(id, { filter: filter }).
            then(function (response) {
                var total = parseInt(response.headers.get('Total'));
                return response.json().then(function (json) /* istanbul ignore next */{return [json, total];});
            }).
            then(function ( /* istanbul ignore next */_ref2) {/* istanbul ignore next */var _ref3 = _slicedToArray(_ref2, 2),json = _ref3[0],total = _ref3[1];
                /* istanbul ignore next */_this9.findingsList = json;
                /* istanbul ignore next */_this9.findingsList.findings = json.findings.map(function (item) {
                    return new /* istanbul ignore next */_FindingModel2.default(item).data;
                });
                var result = {
                    array: /* istanbul ignore next */_this9.findingsList,
                    total: json.total || -1,
                    totalFiltered: total };

                /* istanbul ignore next */_this9.trigger({ event: 'findingsList', data: result });
            });
        } }, { key: 'exportFindings', value: function exportFindings(

        id, format, filter) {/* istanbul ignore next */var _this10 = this;
            if ( /* istanbul ignore next */_detectBrowser2.default && /* istanbul ignore next */_detectBrowser2.default.name === 'safari') {
                /* istanbul ignore next */_api4.default[this.userType].exportFindingsInNewTab(id, format, { filter: filter });
            } else {/* istanbul ignore next */var _context;
                /* istanbul ignore next */_api4.default[this.userType].exportFindings(id, format, { filter: filter }).
                then( /* istanbul ignore next */_processBlobResponse2.default).
                then(function (blobFile) /* istanbul ignore next */{return (/* istanbul ignore next */_this10.trigger({ event: 'openFindingsExport', data: blobFile }));}).
                catch( /* istanbul ignore next */ /* istanbul ignore next */(_context = console).error.bind(_context));
            }
        } }, { key: 'fetchFindingTypes', value: function fetchFindingTypes()

        {/* istanbul ignore next */var _this11 = this;
            /* istanbul ignore next */_api4.default.getFindingTypes().
            then(function (json) {
                /* istanbul ignore next */_this11.findingTypes = json.finding_types;
                /* istanbul ignore next */_this11.trigger({ event: 'findingTypes', data: /* istanbul ignore next */_this11.findingTypes });
            });
        } }, { key: 'getFindingsCount', value: function getFindingsCount(

        runId, filter) {/* istanbul ignore next */var _this12 = this;
            /* istanbul ignore next */_api4.default[this.userType].getFindingsCount(runId, filter).
            then(function (response) {
                /* istanbul ignore next */_this12.trigger({
                    event: 'findingCountUpdated',
                    data: { count_type: filter.count_type, runId: runId, count: response.count } });

            });
        }

        //Report Preview
    }, { key: 'reportConfigureFilePreview', value: function reportConfigureFilePreview(id, data, type) {/* istanbul ignore next */var _this13 = this,_context2;
            /* istanbul ignore next */_api2.default.reportConfigurePreview(id, this.prepareReportParameters(data), type).
            then(function (response) /* istanbul ignore next */{return (/* istanbul ignore next */_this13.checkValidation(response, 'reportGenerationErrors'));}).
            then( /* istanbul ignore next */_processBlobResponse2.default).
            then(function (blobFile) /* istanbul ignore next */{return blobFile && /* istanbul ignore next */_this13.trigger({ event: 'openReportPreview', data: blobFile });}).
            catch( /* istanbul ignore next */ /* istanbul ignore next */(_context2 = console).error.bind(_context2));
        }

        //Report Generate
    }, { key: 'reportConfigureFileGenerate', value: function reportConfigureFileGenerate(id, data, testId) {/* istanbul ignore next */var _this14 = this;
            /* istanbul ignore next */_api2.default.reportConfigureGenerate(id, this.prepareReportParameters(data)).
            then(function (response) {
                /* istanbul ignore next */_this14.checkValidation(response, 'reportGenerationErrors');
                if (response.ok) {
                    response.json().then(function (json) {
                        /* istanbul ignore next */_this14.trigger({ event: 'reportGeneratedAndAttached', data: json });
                        /* istanbul ignore next */_this14.fetchTestDetails(testId);
                    });
                }
            });
        }

        //Report Parameters
    }, { key: 'prepareReportParameters', value: function prepareReportParameters(data) {
            return {
                name: data.reportName,
                cover: data.cover,
                cover_template_id: !data.cover && data.coverTemplateId ? data.coverTemplateId : null,
                template: data.template,
                template_id: !data.template && data.mainTemplateId ? data.mainTemplateId : null,
                override: data.override,
                classification_group_id: data.classificationGroupId };

        } }, { key: 'checkValidation', value: function checkValidation(

        response, triggerName) {/* istanbul ignore next */var _this15 = this;
            if (response.status === 422) {
                response.json().then(function (json) {
                    /* istanbul ignore next */_this15.validation = {};
                    for (var key in json.errors) {
                        /* istanbul ignore next */_this15.validation[key] = json.errors[key].join(', ');
                    }

                    if (triggerName) {
                        /* istanbul ignore next */_this15.trigger({ event: triggerName, data: /* istanbul ignore next */_this15.validation });
                    }
                });
            }
            return response;
        } }]);return TestDetailsStore;}(_BaseStore3.default); /* istanbul ignore next */exports.default =


new TestDetailsStore();