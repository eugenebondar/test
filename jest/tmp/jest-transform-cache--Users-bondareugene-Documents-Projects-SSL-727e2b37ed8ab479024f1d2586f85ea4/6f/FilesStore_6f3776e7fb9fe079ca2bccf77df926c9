/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();exports.














































































































prepareImportFile = prepareImportFile;var /* istanbul ignore next */_Actions = require('../Actions');var /* istanbul ignore next */_api = require('../Models/Files/api'); /* istanbul ignore next */var _api2 = _interopRequireDefault(_api);var /* istanbul ignore next */_BaseStore2 = require('./BaseStore'); /* istanbul ignore next */var _BaseStore3 = _interopRequireDefault(_BaseStore2);var /* istanbul ignore next */_counterpart = require('counterpart'); /* istanbul ignore next */var _counterpart2 = _interopRequireDefault(_counterpart);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var maxFileSizeMB = 100;var MEGABYTE = Math.pow(1024, 2);var maxFileSize = maxFileSizeMB * MEGABYTE; /**
classdesc Class representing a Files Store.
class
istanbul ignore next */var FilesStore = function (_BaseStore) {_inherits(FilesStore, _BaseStore);function /* istanbul ignore next */FilesStore() {/* istanbul ignore next */_classCallCheck(this, FilesStore);return _possibleConstructorReturn(this, (FilesStore.__proto__ || Object.getPrototypeOf(FilesStore)).call(this, [/* istanbul ignore next */_Actions.FilesActions]));}_createClass(FilesStore, [{ key: 'importFindingFile', value: function importFindingFile(runId, findingId, data) {/* istanbul ignore next */var _this2 = this;var file = prepareImportFile(data);if (this.checkFileSize(data, 'importFileValidation')) {/* istanbul ignore next */_api2.default.importFindingFile(runId, findingId, file).then(function (response) {/* istanbul ignore next */_this2.checkValidation(response, 'importFileValidation'); /* istanbul ignore next */_this2.trigger({ event: 'findingFileImported', data: response.ok });});}} }, { key: 'deleteFindingFile', value: function deleteFindingFile(runId, findingId, id) {/* istanbul ignore next */var _this3 = this; /* istanbul ignore next */_api2.default.deleteFindingFile(runId, findingId, id).then(function (response) {/* istanbul ignore next */_this3.trigger({ event: 'findingFileDeleted', data: response.ok });});} }, { key: 'importMultipleFiles', value: function importMultipleFiles(data, isService) {/* istanbul ignore next */var _this4 = this;var file = prepareImportFile(data);if (this.checkFileSize(data)) {/* istanbul ignore next */_api2.default.importFile(file, isService).then(function (response) {/* istanbul ignore next */_this4.checkValidation(response, 'importMultipleFilesValidation', data); /* istanbul ignore next */_this4.trigger({ event: 'multipleFilesImported', data: { status: response.ok, id: data.id } });});} else {var validation = {};validation.file = [/* istanbul ignore next */(0, _counterpart2.default)('errors.fileIsTooBig', { size: maxFileSizeMB })];this.trigger({ event: 'importMultipleFilesValidation', data: { validation: validation, id: data.id } });}} }, { key: 'importFile', value: function importFile(data, isService) {/* istanbul ignore next */var _this5 = this;var file = prepareImportFile(data);if (this.checkFileSize(data, 'importFileValidation')) {/* istanbul ignore next */_api2.default.importFile(file, isService).then(function (response) {/* istanbul ignore next */_this5.checkValidation(response, 'importFileValidation'); /* istanbul ignore next */_this5.trigger({ event: 'fileImported', data: response.ok });});}} }, { key: 'deleteFile', value: function deleteFile(id, data, isService) {/* istanbul ignore next */var _this6 = this; /* istanbul ignore next */_api2.default.deleteFile(id, data, isService).then(function (response) {/* istanbul ignore next */_this6.trigger({ event: 'fileDeleted', data: response.ok });});} }, { key: 'checkFileSize', value: function checkFileSize(data, triggerName) {var isTooBig = data.file.size > maxFileSize;if (isTooBig) {this.validation = {};this.validation.file = [/* istanbul ignore next */(0, _counterpart2.default)('errors.fileIsTooBig', { size: maxFileSizeMB })];triggerName ? this.trigger({ event: triggerName, data: this.validation }) : null;}return !isTooBig;} }, { key: 'checkValidation', value: function checkValidation(response, triggerName, data) {/* istanbul ignore next */var _this7 = this;if (response.status === 422) {response.json().then(function (json) {var validation = Object.keys(json.errors).filter(function (key) /* istanbul ignore next */{return json.errors[key].length > 0;}).reduce(function (prev, key) {prev[key] = json.errors[key].join(', ');return prev;}, {});if (triggerName) {var validationData = triggerName === 'importMultipleFilesValidation' ? { validation: validation, id: data.id } : validation; /* istanbul ignore next */_this7.trigger({ event: triggerName, data: validationData });}});}return null;} }]);return FilesStore;}(_BaseStore3.default); /* istanbul ignore next */exports.default = new FilesStore();function prepareImportFile(data) {var file = new FormData();for (var key in data) {
        file.append(key, data[key]);
    }
    return file;
}