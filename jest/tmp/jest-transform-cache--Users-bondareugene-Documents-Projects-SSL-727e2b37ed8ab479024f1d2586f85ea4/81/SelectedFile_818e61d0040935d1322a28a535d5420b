/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);

/* istanbul ignore next */require('./SelectedFile.less'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

SelectedFile = function (_React$Component) {_inherits(SelectedFile, _React$Component);function SelectedFile() {_classCallCheck(this, SelectedFile);return _possibleConstructorReturn(this, (SelectedFile.__proto__ || Object.getPrototypeOf(SelectedFile)).apply(this, arguments));}_createClass(SelectedFile, [{ key: 'render', value: function render()
        {
            if (!this.props.fileName) {
                return null;
            }
            return (
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'select-file-wrapper' },
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'selected-file' },
                        this.props.name, /* istanbul ignore next */': ', /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'b', /* istanbul ignore next */null, this.props.fileName)),

                    this.props.onDelete &&
                    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{
                        className: 'sc-icon-xmark sc-error',
                        onClick: this.props.onDelete })));




        } }]);return SelectedFile;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */exports.default = SelectedFile;


SelectedFile.propTypes = {
    name: /* istanbul ignore next */_react2.default.PropTypes.string.isRequired,
    fileName: /* istanbul ignore next */_react2.default.PropTypes.string,
    onDelete: /* istanbul ignore next */_react2.default.PropTypes.func };