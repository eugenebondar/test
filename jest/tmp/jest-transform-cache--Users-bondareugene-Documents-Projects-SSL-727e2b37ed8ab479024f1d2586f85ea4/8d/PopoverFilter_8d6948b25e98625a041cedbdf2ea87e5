/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_classnames = require('classnames'); /* istanbul ignore next */var _classnames2 = _interopRequireDefault(_classnames);
/* istanbul ignore next */require('./PopoverFilter.less');
var /* istanbul ignore next */_apocReact = require('apoc-react'); /* istanbul ignore next */function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var

PopoverFilter = function (_React$Component) {_inherits(PopoverFilter, _React$Component);
    function /* istanbul ignore next */PopoverFilter(props) {/* istanbul ignore next */_classCallCheck(this, PopoverFilter);var _this = _possibleConstructorReturn(this, (PopoverFilter.__proto__ || Object.getPrototypeOf(PopoverFilter)).call(this,
        props));
        /* istanbul ignore next */_this.state = {
            isShown: false };

        /* istanbul ignore next */_this.togglePopover = /* istanbul ignore next */_this.togglePopover.bind( /* istanbul ignore next */_this);
        /* istanbul ignore next */_this.closePopover = /* istanbul ignore next */_this.closePopover.bind( /* istanbul ignore next */_this); /* istanbul ignore next */return _this;
    }_createClass(PopoverFilter, [{ key: 'render', value: function render()

        {
            var filterButton = /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'button', /* istanbul ignore next */{ className: 'tests-filter-btn sc-txt-primary', disabled: this.props.disabled },
                /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ className: 'sc-icon-filter' }));


            return this.props.disabled ? /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'popover-filter' }, filterButton) :
            /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_apocReact.Popover, /* istanbul ignore next */{
                    title: filterButton,
                    className: /* istanbul ignore next */(0, _classnames2.default)('popover-filter', this.props.className),
                    placement: /* istanbul ignore next */_apocReact.POPOVER_PLACEMENTS.RIGHT_TOP,
                    openTrigger: /* istanbul ignore next */_apocReact.POPOVER_OPEN_TRIGGER.CLICK_OUTSIDE,
                    onPopoverClick: this.togglePopover,
                    onOutsidePopoverClick: this.closePopover,
                    removeChildrenFromDOMWhenHidden: /* istanbul ignore next */true,
                    isVisible: this.state.isShown },

                this.props.children);


        } }, { key: 'togglePopover', value: function togglePopover()

        {
            this.setState({ isShown: !this.state.isShown });
        } }, { key: 'closePopover', value: function closePopover()

        {
            this.setState({ isShown: false });
        } }]);return PopoverFilter;}( /* istanbul ignore next */_react2.default.Component); /* istanbul ignore next */exports.default = PopoverFilter;


PopoverFilter.propTypes = {
    disabled: /* istanbul ignore next */_react2.default.PropTypes.bool,
    children: /* istanbul ignore next */_react2.default.PropTypes.node,
    className: /* istanbul ignore next */_react2.default.PropTypes.string };